{"version":3,"sources":["/Users/lizhenyong/Desktop/t翻译项目/translate-本地翻译/react/react-hooks-cheatsheet-zh/source/src/utils/colors.js","/Users/lizhenyong/Desktop/t翻译项目/translate-本地翻译/react/react-hooks-cheatsheet-zh/source/src/components/Editor.js","/Users/lizhenyong/Desktop/t翻译项目/translate-本地翻译/react/react-hooks-cheatsheet-zh/source/src/components/examples/fetchData.js","/Users/lizhenyong/Desktop/t翻译项目/translate-本地翻译/react/react-hooks-cheatsheet-zh/source/src/docs/examples/fetchData.mdx"],"names":["red","blue","polished","lightGrey","StyledProvider","styled","div","_templateObject","LiveWrapper","_templateObject2","column","css","_templateObject3","StyledEditor","_templateObject4","props","autoEditorHeight","StyledPreview","_templateObject5","StyledError","LiveError","_templateObject6","defaultScope","useState","useEffect","useLayoutEffect","useMemo","useReducer","useRef","useCallback","useContext","memo","Editor","_ref","noInline","code","react_default","a","createElement","react_live_es","scope","fetchOnMount","fetchOnUserEvent","fetchOnUserEventAndLoading","MDXContent","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","layout","_this$props","components","objectWithoutProperties","dist","name","id","parentName","React","Component","isMDXComponent"],"mappings":"oZAE0B,sKACA,sKACnB,IAAMA,EAAM,iJAEZ,IAAMC,EAAOC,IAAiB,GAAK,8KACnC,IAAMC,EAAYD,IAAgB,IAAM,wkDCU/C,IAAME,EAAiBC,IAAOC,IAAVC,IACDL,IAAa,GAGbA,IAAa,MAG1BM,EAAcH,IAAOC,IAAVG,KAUXC,EAASC,YAAHC,KAWNC,EAAeR,IAAOC,IAAVQ,IACFX,EAEDD,IAAa,IAChB,SAAAa,GAAK,OAAKA,EAAMC,iBAAmB,OAASd,IAAa,MAGjEQ,GAMEO,EAAgBZ,IAAOC,IAAVY,IAOfR,GAGES,EAAcd,YAAOe,IAAPf,CAAHgB,IAEJnB,IAAa,GACVF,EDpEU,WC4EpBsB,EAAe,CACnBC,oBACAC,sBACAC,kCACAC,kBACAC,wBACAC,gBACAC,0BACAC,wBACAC,aAGIC,EAAS,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,SAAUC,EAAbF,EAAaE,KAAMnB,EAAnBiB,EAAmBjB,iBAAnB,OACboB,EAAAC,EAAAC,cAAClC,EAAD,KACEgC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAcJ,KAAMA,EAAMK,MAAOlB,EAAcY,SAAUA,GACvDE,EAAAC,EAAAC,cAAC9B,EAAD,KACE4B,EAAAC,EAAAC,cAACzB,EAAD,CAAcG,iBAAkBA,GAC9BoB,EAAAC,EAAAC,cAACC,EAAA,EAAD,OAEFH,EAAAC,EAAAC,cAACrB,EAAD,KACEmB,EAAAC,EAAAC,cAACC,EAAA,EAAD,QAGJH,EAAAC,EAAAC,cAACnB,EAAD,SAKSa,09BC3GTS,EAAY,kwBAkCZC,EAAgB,+nCAgDhBC,EAA0B,25DCrEXC,cACnB,SAAAA,EAAY7B,GAAO,IAAA8B,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMjC,KACDqC,OAAS,KAFGP,wEAIV,IAAAQ,EAC0BL,KAAKjC,MAA9BuC,EADDD,EACCC,WADDR,OAAAS,EAAA,EAAAT,CAAAO,EAAA,gBAGP,OAAOjB,EAAAC,EAAAC,cAACkB,EAAA,OAAD,CACEC,KAAK,UAELH,WAAYA,GACzBlB,EAAAC,EAAAC,cAACkB,EAAA,OAAD,CAAQC,KAAK,KAAKH,WAAYA,EAAYvC,MAAO,CAAC2C,GAAK,8BAAvD,yCACAtB,EAAAC,EAAAC,cAACkB,EAAA,OAAD,CAAQC,KAAK,aAAaH,WAAYA,GACtClB,EAAAC,EAAAC,cAACkB,EAAA,OAAD,CAAQC,KAAK,IAAIH,WAAYA,EAAYK,WAAW,cAApD,yMAEAvB,EAAAC,EAAAC,cAACkB,EAAA,OAAD,CAAQC,KAAK,KAAKH,WAAYA,EAAYvC,MAAO,CAAC2C,GAAK,gDAAvD,+CACAtB,EAAAC,EAAAC,cAACN,EAAA,EAAD,CAAQG,KAAOM,IACfL,EAAAC,EAAAC,cAACkB,EAAA,OAAD,CAAQC,KAAK,KAAKH,WAAYA,EAAYvC,MAAO,CAAC2C,GAAK,yFAAvD,wFACAtB,EAAAC,EAAAC,cAACN,EAAA,EAAD,CAAQG,KAAOO,IACfN,EAAAC,EAAAC,cAACkB,EAAA,OAAD,CAAQC,KAAK,KAAKH,WAAYA,EAAYvC,MAAO,CAAC2C,GAAK,+CAAvD,8CACAtB,EAAAC,EAAAC,cAACN,EAAA,EAAD,CAAQG,KAAOQ,YArByBiB,IAAMC,qXAyB9CjB,EAAWkB,gBAAiB","file":"static/js/src-docs-examples-fetch-data.2486ee17.js","sourcesContent":["import * as polished from 'polished'\n\nexport const background = '#282a36'\nexport const foreground = '#f8f8f2'\nexport const red = '#ff5555'\n\nexport const blue = polished.lighten(0.1, '#6272a4')\nexport const lightGrey = polished.darken(0.05, '#282a36')\n","import React, {\n  useState,\n  useEffect,\n  useLayoutEffect,\n  useCallback,\n  useContext,\n  useMemo,\n  useReducer,\n  useRef,\n  memo\n} from 'react'\nimport styled, { css } from 'styled-components'\nimport * as polished from 'polished'\nimport { foreground, red, lightGrey } from '../utils/colors'\n\nimport { LiveProvider, LiveEditor, LiveError, LivePreview } from 'react-live'\n\nconst StyledProvider = styled.div`\n  border-radius: ${polished.rem(3)};\n  box-shadow: 1px 1px 20px rgba(20, 20, 20, 0.27);\n  overflow: hidden;\n  margin-bottom: ${polished.rem(100)};\n`\n\nconst LiveWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: stretch;\n  align-items: stretch;\n  @media (max-width: 600px) {\n    flex-direction: column;\n  }\n`\n\nconst column = css`\n  flex-basis: 50%;\n  width: 50%;\n  max-width: 50%;\n  @media (max-width: 600px) {\n    flex-basis: auto;\n    width: 100%;\n    max-width: 100%;\n  }\n`\n\nconst StyledEditor = styled.div`\n  background: ${lightGrey};\n  font-family: 'Source Code Pro', monospace;\n  font-size: ${polished.rem(14)};\n  height: ${props => (props.autoEditorHeight ? 'auto' : polished.rem(350))};\n  max-height: auto;\n  overflow: auto;\n  ${column};\n  * > textarea:focus {\n    outline: none;\n  }\n`\n\nconst StyledPreview = styled.div`\n  position: relative;\n  padding: 0.5rem;\n  background: white;\n  color: black;\n  height: auto;\n  overflow: hidden;\n  ${column};\n`\n\nconst StyledError = styled(LiveError)`\n  display: block;\n  padding: ${polished.rem(8)};\n  background: ${red};\n  color: ${foreground};\n  white-space: pre-wrap;\n  text-align: left;\n  font-size: 0.9em;\n  font-family: 'Source Code Pro', monospace;\n`\n\nconst defaultScope = {\n  useState,\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useReducer,\n  useRef,\n  useCallback,\n  useContext,\n  memo\n}\n\nconst Editor = ({ noInline, code, autoEditorHeight }) => (\n  <StyledProvider>\n    <LiveProvider code={code} scope={defaultScope} noInline={noInline}>\n      <LiveWrapper>\n        <StyledEditor autoEditorHeight={autoEditorHeight}>\n          <LiveEditor />\n        </StyledEditor>\n        <StyledPreview>\n          <LivePreview />\n        </StyledPreview>\n      </LiveWrapper>\n      <StyledError />\n    </LiveProvider>\n  </StyledProvider>\n)\n\nexport default Editor\n","const fetchOnMount = `() => {\n  const stringifyData = data => JSON.stringify(data, null, 2)\n  const initialData = stringifyData({ data: null })\n  const [data, setData] = useState(initialData)\n\n  useEffect(() => {\n    const fetchData = () => {\n      const uri = 'https://randomuser.me/api/'\n      fetch(uri)\n        .then(res => res.json())\n        .then(({ results }) => {\n          const { name, gender, dob } = results[0]\n          const dataVal = stringifyData({\n            ...name,\n            gender,\n            age: dob.age\n          })\n          setData(dataVal)\n        })\n    }\n\n    fetchData()\n  }, [])\n\n  return (\n    <>\n      <h4> 👇User Data 👇</h4>\n      <section>\n        <pre>{data}</pre>\n      </section>\n    </>\n  )\n}`\n\nconst fetchOnUserEvent = `() => {\n  const stringifyData = data => JSON.stringify(data, null, 2)\n  const initialData = stringifyData({ data: null })\n  const [data, setData] = useState(initialData)\n\n  const [gender, setGender] = useState('female')\n\n  useEffect(() => {\n    const fetchData = () => {\n      const uri = 'https://randomuser.me/api/?gender=' + gender\n      fetch(uri)\n        .then(res => res.json())\n        .then(({ results }) => {\n          const { name, gender, dob } = results[0]\n          const dataVal = stringifyData({\n            ...name,\n            gender,\n            age: dob.age\n          })\n          setData(dataVal)\n        })\n    }\n\n    fetchData()\n  }, [gender])\n\n  return (\n    <>\n      <button\n        onClick={() => setGender('male')}\n        style={{ outline: gender === 'male' ? '1px solid' : 0 }}\n      >\n        Fetch Male User\n      </button>\n      <button\n        onClick={() => setGender('female')}\n        style={{ outline: gender === 'female' ? '1px solid' : 0 }}\n      >\n        Fetch Female User\n      </button>\n\n      <section>\n        <pre>{data}</pre>\n      </section>\n    </>\n  )\n}`\n\nconst fetchOnUserEventAndLoading = `() => {\n  const stringifyData = data => JSON.stringify(data, null, 2)\n  const initialData = stringifyData({ data: null })\n  const loadingData = stringifyData({ data: 'loading...' })\n  const [data, setData] = useState(initialData)\n\n  const [gender, setGender] = useState('female')\n  const [loading, setLoading] = useState(false)\n\n  useEffect(\n    () => {\n      const fetchData = () => {\n        setLoading(true)\n        const uri = 'https://randomuser.me/api/?gender=' + gender\n        fetch(uri)\n          .then(res => res.json())\n          .then(({ results }) => {\n            setLoading(false)\n            const { name, gender, dob } = results[0]\n            const dataVal = stringifyData({\n              ...name,\n              gender,\n              age: dob.age\n            })\n            setData(dataVal)\n          })\n      }\n\n      fetchData()\n    },\n    [gender]\n  )\n\n  return (\n    <>\n      <button\n        onClick={() => setGender('male')}\n        style={{ outline: gender === 'male' ? '1px solid' : 0 }}\n      >\n        Fetch Male User\n      </button>\n      <button\n        onClick={() => setGender('female')}\n        style={{ outline: gender === 'female' ? '1px solid' : 0 }}\n      >\n        Fetch Female User\n      </button>\n\n      <section>\n        {loading ? <pre>{loadingData}</pre> : <pre>{data}</pre>}\n      </section>\n    </>\n  )\n}`\n\nexport { fetchOnMount, fetchOnUserEvent, fetchOnUserEventAndLoading }\n","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import Editor from \"../../components/Editor\"\nimport { \n    fetchOnMount, \n    fetchOnUserEvent, \n    fetchOnUserEventAndLoading \n} from \"../../components/examples/fetchData\"\n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"获取数据-\"}}>{`获取数据 🏃`}</MDXTag>\n<MDXTag name=\"blockquote\" components={components}>\n<MDXTag name=\"p\" components={components} parentName=\"blockquote\">{`在 Suspense 发布之前，获取的数据，证明是钩子的一个很好练习。享受以下示例`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"获取-mount-上的数据\"}}>{`获取 mount 上的数据`}</MDXTag>\n<Editor code={ fetchOnMount } />\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"用户事件触发，响应中获取数据\"}}>{`用户事件触发，响应中获取数据`}</MDXTag>\n<Editor code={ fetchOnUserEvent } />\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"显示加载指示器\"}}>{`显示加载指示器`}</MDXTag>\n<Editor code={ fetchOnUserEventAndLoading } />\n           </MDXTag>\n  }\n}\nMDXContent.isMDXComponent = true\n  "],"sourceRoot":""}