{"version":3,"sources":["/Users/lizhenyong/Desktop/t翻译项目/translate-本地翻译/react/react-hooks-cheatsheet-zh/source/src/utils/colors.js","/Users/lizhenyong/Desktop/t翻译项目/translate-本地翻译/react/react-hooks-cheatsheet-zh/source/src/components/Editor.js","/Users/lizhenyong/Desktop/t翻译项目/translate-本地翻译/react/react-hooks-cheatsheet-zh/source/src/components/examples/useContext.js","/Users/lizhenyong/Desktop/t翻译项目/translate-本地翻译/react/react-hooks-cheatsheet-zh/source/src/docs/useContext.mdx"],"names":["red","blue","polished","lightGrey","StyledProvider","styled","div","_templateObject","LiveWrapper","_templateObject2","column","css","_templateObject3","StyledEditor","_templateObject4","props","autoEditorHeight","StyledPreview","_templateObject5","StyledError","LiveError","_templateObject6","defaultScope","useState","useEffect","useLayoutEffect","useMemo","useReducer","useRef","useCallback","useContext","memo","Editor","_ref","noInline","code","react_default","a","createElement","react_live_es","scope","ContextConsumerExample","useContextDisplay","MDXContent","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","layout","_this$props","components","objectWithoutProperties","dist","name","id","parentName","href","className","React","Component","isMDXComponent"],"mappings":"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","file":"static/js/src-docs-use-context.2563fabf.js","sourcesContent":["import * as polished from 'polished'\n\nexport const background = '#282a36'\nexport const foreground = '#f8f8f2'\nexport const red = '#ff5555'\n\nexport const blue = polished.lighten(0.1, '#6272a4')\nexport const lightGrey = polished.darken(0.05, '#282a36')\n","import React, {\n  useState,\n  useEffect,\n  useLayoutEffect,\n  useCallback,\n  useContext,\n  useMemo,\n  useReducer,\n  useRef,\n  memo\n} from 'react'\nimport styled, { css } from 'styled-components'\nimport * as polished from 'polished'\nimport { foreground, red, lightGrey } from '../utils/colors'\n\nimport { LiveProvider, LiveEditor, LiveError, LivePreview } from 'react-live'\n\nconst StyledProvider = styled.div`\n  border-radius: ${polished.rem(3)};\n  box-shadow: 1px 1px 20px rgba(20, 20, 20, 0.27);\n  overflow: hidden;\n  margin-bottom: ${polished.rem(100)};\n`\n\nconst LiveWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: stretch;\n  align-items: stretch;\n  @media (max-width: 600px) {\n    flex-direction: column;\n  }\n`\n\nconst column = css`\n  flex-basis: 50%;\n  width: 50%;\n  max-width: 50%;\n  @media (max-width: 600px) {\n    flex-basis: auto;\n    width: 100%;\n    max-width: 100%;\n  }\n`\n\nconst StyledEditor = styled.div`\n  background: ${lightGrey};\n  font-family: 'Source Code Pro', monospace;\n  font-size: ${polished.rem(14)};\n  height: ${props => (props.autoEditorHeight ? 'auto' : polished.rem(350))};\n  max-height: auto;\n  overflow: auto;\n  ${column};\n  * > textarea:focus {\n    outline: none;\n  }\n`\n\nconst StyledPreview = styled.div`\n  position: relative;\n  padding: 0.5rem;\n  background: white;\n  color: black;\n  height: auto;\n  overflow: hidden;\n  ${column};\n`\n\nconst StyledError = styled(LiveError)`\n  display: block;\n  padding: ${polished.rem(8)};\n  background: ${red};\n  color: ${foreground};\n  white-space: pre-wrap;\n  text-align: left;\n  font-size: 0.9em;\n  font-family: 'Source Code Pro', monospace;\n`\n\nconst defaultScope = {\n  useState,\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useReducer,\n  useRef,\n  useCallback,\n  useContext,\n  memo\n}\n\nconst Editor = ({ noInline, code, autoEditorHeight }) => (\n  <StyledProvider>\n    <LiveProvider code={code} scope={defaultScope} noInline={noInline}>\n      <LiveWrapper>\n        <StyledEditor autoEditorHeight={autoEditorHeight}>\n          <LiveEditor />\n        </StyledEditor>\n        <StyledPreview>\n          <LivePreview />\n        </StyledPreview>\n      </LiveWrapper>\n      <StyledError />\n    </LiveProvider>\n  </StyledProvider>\n)\n\nexport default Editor\n","const ContextConsumerExample = `\nconst ThemeContext = React.createContext('light')\n\nconst Display = () => {\n  return (\n    <ThemeContext.Consumer>\n      {theme => (\n        <div\n          style={{\n            background: theme === 'dark' ? 'black' : 'papayawhip',\n            color: theme === 'dark' ? 'white' : 'palevioletred',\n            width: '100%',\n            minHeight: '200px'\n          }}\n        >\n          {'The theme here is ' + theme}\n        </div>\n      )}\n    </ThemeContext.Consumer>\n  )\n}\nrender(Display)`\n\nconst useContextDisplay = `\nconst ThemeContext = React.createContext('light');\n\nconst Display = () => {\n const theme = useContext(ThemeContext);\n return <div\n        style={{\n        background: theme === 'dark' ? 'black' : 'papayawhip',\n        color: theme === 'dark' ? 'white' : 'palevioletred',\n        width: '100%',\n        minHeight: '200px'\n        }}\n    >\n        {'The theme here is ' + theme}\n    </div>\n}\nrender(Display)`\n\nexport { ContextConsumerExample, useContextDisplay }\n","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import Editor from '../components/Editor'\nimport {\n    ContextConsumerExample,\n    useContextDisplay,\n} from '../components/examples/useContext'\n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"usecontext-\"}}>{`useContext 👜`}</MDXTag>\n<MDXTag name=\"blockquote\" components={components}>\n<MDXTag name=\"p\" components={components} parentName=\"blockquote\">{`笔记：`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`useContext`}</MDXTag>{`为您节省了，必须依赖 Context consumer 的压力。`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`与`}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`MyContext.Consumer`}</MDXTag>{`以及它公开的渲染 props API 相比，它具有更简单的 API。`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`查看`}<MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"https://zh-hans.reactjs.org/docs/hooks-reference.html#usecontext\"}}>{`文档`}</MDXTag></MDXTag>\n</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-js\"}}>{`// 之前:\nconst ThemeContext = React.createContext('dark')\n\nfunction Button() {\n    return (\n        <ThemeContext.Consumer>\n            {theme => <button className={theme}>Amazing button</button>}\n        </ThemeContext.Consumer>\n    )\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`这是一个`}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`ThemeContext.Consumer`}</MDXTag>{`的在线例子：`}</MDXTag>\n<Editor noInline code={ContextConsumerExample} />\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-js\"}}>{`// 现在:\nimport { useContext } from 'react'\n\nfunction ButtonHooks() {\n    const theme = useContext(ThemeContext)\n    return <button className={theme}>Amazing button</button>\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`这是一个`}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`useContext`}</MDXTag>{`在线例子：`}</MDXTag>\n<Editor noInline code={useContextDisplay} />\n           </MDXTag>\n  }\n}\nMDXContent.isMDXComponent = true\n  "],"sourceRoot":""}