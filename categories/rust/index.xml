<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rust on Code &gt; Explain &gt; Transalte 的人</title>
    <link>/categories/rust/</link>
    <description>Recent content in Rust on Code &gt; Explain &gt; Transalte 的人</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Fri, 13 Mar 2020 11:19:14 +0800</lastBuildDate>
    
	<atom:link href="/categories/rust/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Rust周报 329(译)</title>
      <link>/2020/03/13/rust%E5%91%A8%E6%8A%A5-329%E8%AF%91/</link>
      <pubDate>Fri, 13 Mar 2020 11:19:14 +0800</pubDate>
      
      <guid>/2020/03/13/rust%E5%91%A8%E6%8A%A5-329%E8%AF%91/</guid>
      <description>this-week-in-rust 日期：2020-03-10 原文：329 期  你好，欢迎再来一期*本周的螃蟹行情*！Rust是一种追求三位一体的系统语言：安全性、并发性和速度。这是它的进展和社区的每周总结。有什么要说的吗？推特@ThisWeekInRust或向我们发送请求。 想参与吗？我们热爱贡献.
*这本周的螃蟹行情*是在在 Github 上公开的。如果你在本周的问题中发现任何错误，请提交 PR。
Rust 社区的更新 新闻和博客文章  builder pattern 的替代方法，初始化结构模式。 Bottlerocket 是一种新的基于 Linux 的操作系统，几乎将所有新组件都使用了 Rust。 Rust pt 解析库 P1。 是的，我还在学习 Rust。 我刚刚为 rust-analyzer 做出了第一个开源贡献。 Nannou 更新 —— WebGPU，捕获帧等。 C＃程序员调查 Rust —— 第 1 部分。 我对 Rust 和.NET 的探索。 cfg(doctest)是稳定的，你应该使用它。 ExpressJS 与 Actix-Web：性能和运行成本比较。 rust-analyzer changelog 15。 本月 Rust gamedev 7 —— 2020 年 2 月。 2020 RustConf CFP 现已开放。  周箱 这周的箱子是plotly，plotly.</description>
    </item>
    
    <item>
      <title>Rust周报 328(译)</title>
      <link>/2020/03/13/rust%E5%91%A8%E6%8A%A5-328%E8%AF%91/</link>
      <pubDate>Fri, 13 Mar 2020 11:18:20 +0800</pubDate>
      
      <guid>/2020/03/13/rust%E5%91%A8%E6%8A%A5-328%E8%AF%91/</guid>
      <description>this-week-in-rust 日期：2020-03-03 原文：328 期  你好，欢迎再来一期*本周的螃蟹行情*！Rust是一种追求三位一体的系统语言：安全性、并发性和速度。这是它的进展和社区的每周总结。有什么要说的吗？推特@ThisWeekInRust或向我们发送请求。 想参与吗？我们热爱贡献.
*这本周的螃蟹行情*是在在 Github 上公开的。如果你在本周的问题中发现任何错误，请提交 PR。
Rust 社区的更新 新闻和博客文章  宣布 Rust 1.41.1。 半小时 Rust。 最近和将来的 pattern matching 改进。 高性能 Rust 的易技巧。 了解 Rust 中的 String 和＆str。 caniuse.rs - Rust feature 搜索。 在嵌入式 Rust 上的 async/await 。 RustCrypto aes-gcm和chacha20poly1305箱子，由 NCC 组审核。 FFI patterns ＃1 - 复杂的 Rust 数据结构，无缝地公开给 C ++。 多维数组，和 NDArray 的操作。 探索 Rust，使用中断处理程序实现和共享数据的方法。 使用 Rust 将 JavaScript 应用程序移植到 WebAssembly（第 3 部分）。 Pietro Albini 已加入核心团队。 宣布首次 FFI-unwind 项目设计会议。 Rust 编写操作系统：2020 年 2 月更新。 rust-analyzerChangelog 14。 IntelliJ Rust 更新日志 117。 本月 rustsim , 9。 Rust 区块链时讯 9：在家工作的月份。 Tokio v0.</description>
    </item>
    
    <item>
      <title>Rust周报 327(译)</title>
      <link>/2020/02/28/rust%E5%91%A8%E6%8A%A5-327%E8%AF%91/</link>
      <pubDate>Fri, 28 Feb 2020 11:11:08 +0800</pubDate>
      
      <guid>/2020/02/28/rust%E5%91%A8%E6%8A%A5-327%E8%AF%91/</guid>
      <description>this-week-in-rust 日期：2020-02-25 原文：327 期  你好，欢迎再来一期*本周的螃蟹行情*！Rust是一种追求三位一体的系统语言：安全性、并发性和速度。这是它的进展和社区的每周总结。有什么要说的吗？推特@ThisWeekInRust或向我们发送请求。 想参与吗？我们热爱贡献.
*这本周的螃蟹行情*是在在 Github 上公开的。如果你在本周的问题中发现任何错误，请提交 PR。
Rust 社区的更新 新闻和博客文章  使用 Rust String。 Rust / WinRT 即将推出。 rustc 的自我分析器简介。 crates.io 2020-02-20 事件报告。 命令行：过滤重复项：比 sort | uniq 快 30 倍。 制作我们自己的可执行打包器。 Ramer–Douglas–Peucker 算法 —— 将曲线近似表示为一系列点，并减少点的数量的一种算法。 异步 HTTP。 关于异步/等待的进一步思考。 Rust 团队按比例分流。 介绍，图像处理服务 Dali。 宣布 async_executors，这是 executor agnostic 库的构建块。 使用 vgtk 构建 TodoMVC。 在 github 页面或其他页面上，托管 Rust + Wasm 项目。 Programming Servo：实现 BroadcastChannel。 Fuchsia 编程语言政策。 rust-analyzer changelog 113。  周箱 这周的箱子是wundergraph，一个 GraphQL 接口库；和kibi，千行 Rust 的文本编辑器。</description>
    </item>
    
    <item>
      <title>2019Rust图形库之路(译) —— ggez 作者</title>
      <link>/2020/02/24/2019rust%E5%9B%BE%E5%BD%A2%E5%BA%93%E4%B9%8B%E8%B7%AF%E8%AF%91-ggez-%E4%BD%9C%E8%80%85/</link>
      <pubDate>Mon, 24 Feb 2020 15:00:04 +0800</pubDate>
      
      <guid>/2020/02/24/2019rust%E5%9B%BE%E5%BD%A2%E5%BA%93%E4%B9%8B%E8%B7%AF%E8%AF%91-ggez-%E4%BD%9C%E8%80%85/</guid>
      <description>2019 Rust 图形库之路  Rust 图形库指南 介绍 到底事情是怎么的  OpenGL DirectX Vulkan Metal  真真真 Rust! 好了，你是 gfx 粉丝仔，那其他的呢  glium luminance ash vulkano rendy  未来在继续书写 (in Rust) 所以，我要用什么，让一个三角形图出现在屏幕上呢？ 附录: 游戏框架  Rust 图形库指南 截至 2019 年 5 月。
介绍 因为，在Unofficial Rust Discord的游戏开发频道上，大家在谈论图形 API 的问题，哪个到了什么地步以及做什么的，人们相互争执和相互纠正，&amp;rdquo;雨水来得过于猛烈&amp;rdquo;，一切的一切都变得有些模糊，混乱。所以在这里，我准备 尝试 捋一捋记录。本文旨在为希望使用 Rust，编写图形东西（视频游戏，动画，炫酷的可视化等）的人，但又不知道他们应从哪里开始，提供些背景知识。
你为什么要相信我？因为我需要知道这些东西才能选择ggez的伙伴，所以最近几年我一直在关注事物的状态。而且因为我对这些东西真的很感兴趣; 而且因为我喜欢写作。就说，虽然我远不是专家，但更像是一个兴致勃勃的观察家。
但是，在深入研究 Rust 细节之前，让我们先了解一下图形 API 的奇妙世界……
到底事情是怎么的 没有人直接为 GPU 编写代码。硬件接口，指令集以及它们实际工作方式的细节受到制造商的严密保护，好吧，除了三个主要制造商中的两位 —— 现在开源了（大部分）驱动程序。因此，实际上只剩下 NVidia 是锁源的。GPU 硬件可以快速发展，而不必担心向后兼容性，但最近十年左右，看起来 GPU 和 CPU 相互通信的基本设计和折衷方法已经达到了更稳定的状态。Anyway，不管实际原因，操作系统的 GPU 驱动程序会与硬件进行所有对话，并为（可以是你写的）程序提供与之对话的 API。实际上，有很多这样的 API，您以前可能已经听说过其中一些，所以让我们来看看明星选手：</description>
    </item>
    
    <item>
      <title>Rust周报 326(译)</title>
      <link>/2020/02/21/rust%E5%91%A8%E6%8A%A5-326%E8%AF%91/</link>
      <pubDate>Fri, 21 Feb 2020 14:51:57 +0800</pubDate>
      
      <guid>/2020/02/21/rust%E5%91%A8%E6%8A%A5-326%E8%AF%91/</guid>
      <description>this-week-in-rust 日期：2020-02-18 原文：326 期  你好，欢迎再来一期*本周的螃蟹行情*！Rust是一种追求三位一体的系统语言：安全性、并发性和速度。这是它的进展和社区的每周总结。有什么要说的吗？推特@ThisWeekInRust或向我们发送请求。 想参与吗？我们热爱贡献.
*这本周的螃蟹行情*是在在 Github 上公开的。如果你在本周的问题中发现任何错误，请提交 PR。
Rust 社区的更新 新闻和博客文章  Sealed Rust 更新：Rust 安全为重计划。 为什么 Rust 是最受欢迎的编程语言？ Rust ghost，signing off。 我审核了异步 RwLock 的 3 种不同实现。 deny(warnings) is 相当有害。 Rust for Java devs。 Rust，未定义行为的一些细微差别。 一个务实的方法，to 全局状态 Rust 中的图形：GraphCore 简介。 faux - 内部的样子 rust-analyzer changelog 12。 IntelliJ Rust changelog 116。 Rust GameDev 月刊 6 -2020 年 1 月。  周箱 这周的箱子是pointer-utils，一个用于处理指针的小型库，以及jlrs，一个箱子可以从 Rust 调用Julia。
谢谢Vikrant的建议！
提交下周的建议和投票！</description>
    </item>
    
    <item>
      <title>Rust周报 325(译)</title>
      <link>/2020/02/14/rust%E5%91%A8%E6%8A%A5-325%E8%AF%91/</link>
      <pubDate>Fri, 14 Feb 2020 11:34:24 +0800</pubDate>
      
      <guid>/2020/02/14/rust%E5%91%A8%E6%8A%A5-325%E8%AF%91/</guid>
      <description>this-week-in-rust 日期：2020-02-11 原文：325 期  你好，欢迎再来一期*本周的螃蟹行情*！Rust是一种追求三位一体的系统语言：安全性、并发性和速度。这是它的进展和社区的每周总结。有什么要说的吗？推特@ThisWeekInRust或向我们发送请求。 想参与吗？我们热爱贡献.
*这本周的螃蟹行情*是在在 Github 上公开的。如果你在本周的问题中发现任何错误，请提交 PR。
Rust 社区的更新 新闻和博客文章  Alex Crichton：减少我对 Rust 的参与。 将 async/await 引入 embedded Rust。 宣布: the Cleanup Crew ICE-breaker 小组。 Rust 游戏开发生态系统调查的结果。 Rusoto 的 std::future::Future。 在 VSCode 中，调试 Rust（2020 年）。 从 React 的角度，来看 Rust 和 GTK。 Rust 异步入门。 解决 Rust 中的 sparse matrix 系统。 我做了一件事情：Markedit。 创建交互式应用程序。 异步采访 6：Eliza Weisman。 rust-analyzer changelog 11。  周箱 这周的箱子是argh，是 Rust 的一个有主见的参数解析小库。
谢谢Vikrant的建议！</description>
    </item>
    
    <item>
      <title>Rust游戏开发2020生态圈展望 调查结果(译)</title>
      <link>/2020/02/08/rust%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%912020%E7%94%9F%E6%80%81%E5%9C%88%E5%B1%95%E6%9C%9B-%E8%B0%83%E6%9F%A5%E7%BB%93%E6%9E%9C%E8%AF%91/</link>
      <pubDate>Sat, 08 Feb 2020 13:44:16 +0800</pubDate>
      
      <guid>/2020/02/08/rust%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%912020%E7%94%9F%E6%80%81%E5%9C%88%E5%B1%95%E6%9C%9B-%E8%B0%83%E6%9F%A5%E7%BB%93%E6%9E%9C%E8%AF%91/</guid>
      <description>Rust Game Development - Ecosystem Survey 2020 年 2 月 6 日
去年 8 月，我们对 Rust gamedev 生态圈进行了一次调查。在不幸的耽搁之后，我们终于可以交出结果了。我们收到了高达 403 个回复！这些宝贵的反馈将为工作组 2020 年的路线图提供动力。
 爱好者 or 开发者?  游戏开发你会用 Rust 吗?   如今, 挡在 Rust 游戏开发与你之间的最大阻力是什么?  Ecosystem 成熟 (114)  迭代用时 (68)  文档 (43)  缺乏完整功能的引擎 (35)  Rust 学习曲线 / 入门到小众语言 (29)  IDE/RLS story (28)  GUI 工具 (23)  游戏主机 (13)  Web/mobile 支持 (14)  Allocators (10)  C++ interop (7)   如今, 系在 Rust 游戏开发与你之间最亮眼的红线是什么?</description>
    </item>
    
    <item>
      <title>Rust周报 324(译)</title>
      <link>/2020/02/07/rust%E5%91%A8%E6%8A%A5-324%E8%AF%91/</link>
      <pubDate>Fri, 07 Feb 2020 13:57:05 +0800</pubDate>
      
      <guid>/2020/02/07/rust%E5%91%A8%E6%8A%A5-324%E8%AF%91/</guid>
      <description>this-week-in-rust 日期：2020-02-04 原文：324 期  你好，欢迎再来一期*本周的螃蟹行情*！Rust是一种追求三位一体的系统语言：安全性、并发性和速度。这是它的进展和社区的每周总结。有什么要说的吗？推特@ThisWeekInRust或向我们发送请求。 想参与吗？我们热爱贡献.
*这本周的螃蟹行情*是在在 Github 上公开的。如果你在本周的问题中发现任何错误，请提交 PR。
Rust 社区的更新 新闻和博客文章  🎈🎉宣布 Rust 1.41.0。🎉🎈 为什么 Discord，从 Go 切换到 Rust。 Rust 编写操作系统：2020 年 1 月更新。 用 Rust 测量钢琴键的 space-time 行为。 建立自己的 executor。 针对 Raspberry Pi，在 Linux 上交叉编译 Rust。 2020 Rust 活动主线。 使用 Bastion 编写 AWS Lambda 函数。 rust-search-extension：在浏览器的地址栏中，搜索标准文档，箱子，错误代码和属性。 嵌入式工作组的新闻咨询 23。 Rust Analyzer 变更日志 10。 IntelliJ Rust 更新日志 115。 Rust 区块链新闻 8：展望 2020。 宣布 async-std v1.5.0。 宣布 Tide 0.</description>
    </item>
    
    <item>
      <title>Rust周报 323(译)</title>
      <link>/2020/01/30/rust%E5%91%A8%E6%8A%A5-323%E8%AF%91/</link>
      <pubDate>Thu, 30 Jan 2020 23:14:57 +0800</pubDate>
      
      <guid>/2020/01/30/rust%E5%91%A8%E6%8A%A5-323%E8%AF%91/</guid>
      <description>this-week-in-rust 日期：2020-01-28 原文：323 期  你好，欢迎再来一期*本周的螃蟹行情*！Rust是一种追求三位一体的系统语言：安全性、并发性和速度。这是它的进展和社区的每周总结。有什么要说的吗？推特@ThisWeekInRust或向我们发送请求。 想参与吗？我们热爱贡献.
*这本周的螃蟹行情*是在在 Github 上公开的。如果你在本周的问题中发现任何错误，请提交 PR。
Rust 社区的更新 新闻和博客文章  cargo-audit v0.11：介绍fix功能，箱子检测，更多功能。 Bitfields forever：为什么需要兼容 C 的 Rust 箱子。 Rust 中，具有改进类型的测量单元。 std.rs：直接访问稳定的 rust docs。 100 LoC 以下的，无堆栈 Rust 协程库。 Zebra 如何使用 Tower 用现代的 async Rust 代替 Zcash 的旧比特币 C ++网络代码。 建立你自己的block_on()。 为 Debian 打包一个 Rust 项目。 Byte 有序型 streams。 Tide channels。 将库更新为 std::future 的经验教训。 返回 trait 对象。 在 Raspberry Pi 上，为 PineTime 调试 Rust + Mynewt 固件。 rust-analyzer changelog 9。  周箱 这周的箱子是test-case，用于参数化测试的框架。</description>
    </item>
    
    <item>
      <title>Rust周报 322(译)</title>
      <link>/2020/01/23/rust%E5%91%A8%E6%8A%A5-322%E8%AF%91/</link>
      <pubDate>Thu, 23 Jan 2020 21:50:07 +0800</pubDate>
      
      <guid>/2020/01/23/rust%E5%91%A8%E6%8A%A5-322%E8%AF%91/</guid>
      <description>this-week-in-rust 日期：2020-01-21 原文：322 期  你好，欢迎再来一期*本周的螃蟹行情*！Rust是一种追求三位一体的系统语言：安全性、并发性和速度。这是它的进展和社区的每周总结。有什么要说的吗？推特@ThisWeekInRust或向我们发送请求。 想参与吗？我们热爱贡献.
*这本周的螃蟹行情*是在在 Github 上公开的。如果你在本周的问题中发现任何错误，请提交 PR。
Rust 社区的更新 新闻和博客文章  烟雾测试(Smoke-testing) Rust HTTP 客户端。 Rust 伤心的一天。 什么是 Rust，为什么如此受欢迎 —— 来自官方 StackOverflow 博客。 Rust 编写操作系统：分配器设计。 如何重构宏，将我的 Rust 项目的编译时间从 4 小时减少到 40 秒。 为什么高级 slice 模式的稳定，对我来说很重要。 如何编写快速的 Rust 代码。 公开 C 和 Rust API：librsvg 的一些想法。 ESP32 上的 Rust —— SVD，PAC 和 USB 闪存。 Epoll，Kqueue 和 IOCP 用 Rust 进行了解释。 Servo 编程：三年，100 次 commits。 Verona 计划：Microsoft 受 Rust 启发的研究语言，已经发布。  周箱 这周的箱子是fasteval，用于快速，安全地执行代数表达式的箱子。</description>
    </item>
    
    <item>
      <title>Rust GameDev 月刊 #5(译)</title>
      <link>/2020/01/22/rust-gamedev-%E6%9C%88%E5%88%8A-5%E8%AF%91/</link>
      <pubDate>Wed, 22 Jan 2020 09:59:00 +0800</pubDate>
      
      <guid>/2020/01/22/rust-gamedev-%E6%9C%88%E5%88%8A-5%E8%AF%91/</guid>
      <description>This Month in Rust GameDev #5 - December 2019 2020 年 1 月 10 日
欢迎来到 Rust GameDev 工作组的第五期月刊。
Rust是一种追求三重性的系统语言：安全性、并发性和速度。这些目标与游戏开发非常一致。
我们希望为想在开发过程中，使用 Rust 的人建立一个吸引人的生态系统！想参与吗？加入 Rust GameDev working group!
想要加入下一期新闻？Send us a pull request 随意发送有关您自己的项目的 PR。
演讲呼吁: Rust GameDev 伦敦站 #  我是Rust London的社区领导，我只想为任何一个在伦敦的人做些调查，想在我们的 Rust 伦敦站上做个演讲。我们想举办一个专门针对 GameDev 的 LDN 会谈。
 详细信息看这里.
Game Updates # A/B Street - Adjust Traffic Patterns in Real Cities # 曾经坐在交通堵塞的公交车上，想知道为什么会有车停在路上，而不是公交专用道上？A/B Street这是一个探索道路空间和交通信号的微小变化，如何影响司机、骑自行车者、公交用户和行人的移动的游戏。游戏使用OpenStreetMap和其他公共数据集，让玩家调整现有的基础设施，然后做一个详细的比较，看看谁的变化有帮助/伤害。
A/B Street 是用 Rust 编写的，在glium之上，使用自定义 GUI 库。</description>
    </item>
    
    <item>
      <title>Rust GameDev 月刊 #4(译)</title>
      <link>/2020/01/22/rust-gamedev-%E6%9C%88%E5%88%8A-4%E8%AF%91/</link>
      <pubDate>Wed, 22 Jan 2020 09:58:47 +0800</pubDate>
      
      <guid>/2020/01/22/rust-gamedev-%E6%9C%88%E5%88%8A-4%E8%AF%91/</guid>
      <description>This Month in Rust GameDev #4 - 11 月 2019 2019-12-08
Rust是一种追求三重性的系统语言：安全性、并发性和速度。这些目标与游戏开发非常一致。
我们希望为想在开发过程中，使用 Rust 的人建立一个吸引人的生态系统！想参与吗？加入 Rust GameDev working group!
想要加入下一期新闻？Send us a pull request 随意发送有关您自己的项目的 PR。
Game Updates # Le Train Dispatcher - Route Trains in 模拟铁路网络 # Le Train Dispatcher！itch.io，Patreon 允许你在完全模拟的铁路网络中，对火车进行路线选择。特别注意了光信号的实际管理（block 系统，开关保护），列车物理特性和弯道追踪。
该游戏使用 Rust 编程，主要使用的箱子是：ggez，imgui 和 serde。
这第一个版本完全可玩，但是如果您想发表评论，提出您的想法或为游戏的发展做出贡献，请不要犹豫地发布一个message。
独特的特点：
 逼真的灯光信号模拟：已经进行了大量的工程工作，来对铁路信号进行逼真的管理。 没有碰撞：是的，放手，看到许多火车自动行驶，这很有趣。你的所有行为都要检查：不能将火车置于危险之中。 真实物理学  每个机车或货车都有其自身的重量，驱动力或制动力，和其粘连系数。 这些弯道不是简单的圆，它们的计算公式与实际道路或铁路网络中，使用的方程相同。   Veloren # Veloren是一个开放世界，开放源代码的多人体素 RPG。该游戏尚处于开发初期，但可以玩。
11 月的一些更新：
 主存储库达到 50,000 行代码（根据Tokei）; Airshipper launcher 明显改善； 游戏设计工作组成立； 改进了身份验证，玩家创建界面，资产压缩，故事和配乐； CI 升级，大量错误修正和内容升级。  完整的每周开发日志“本周在 Veloren &amp;hellip;”：#40，#41，#42，#43。</description>
    </item>
    
    <item>
      <title>Rust GameDev 月刊 #3(译)</title>
      <link>/2020/01/21/rust-gamedev-%E6%9C%88%E5%88%8A-3%E8%AF%91/</link>
      <pubDate>Tue, 21 Jan 2020 12:38:01 +0800</pubDate>
      
      <guid>/2020/01/21/rust-gamedev-%E6%9C%88%E5%88%8A-3%E8%AF%91/</guid>
      <description>Rust GameDev #3 月刊 - 10 月 2019  2019 年 11 月 7 日
欢迎来到 Rust GameDev 工作组月刊，第三期。
Rust是一种追求三重性的系统语言：安全性、并发性和速度。这些目标与游戏开发非常一致。
我们希望为想在开发过程中，使用 Rust 的人建立一个吸引人的生态系统！想参与吗？加入 Rust GameDev working group!
游戏更新 # Sulis - a Turn-Based RPG # Sulis是一款角色扮演游戏（RPG），具有回合制、战略战斗、深度角色定制和引人入胜的故事情节。游戏从一开始，就以改造和定制的内容角度，进行考虑。当前支持 Windows 和 Linux 平台。
该游戏目前是完全可玩的，包括 the first act of Twin Expanse，一个经典游戏类似的老式 RPG 战役，如*巴尔杜尔之门*，但混合了现代元素，如*神界原罪*和*永恒之柱*。
核心游戏引擎以及战役仍在大力开发中。鼓励用户给出 bugs issues，功能请求或任何其他反馈。
特征：
 跨平台原生二进制文件，当前构建，供给 Windows 和 Linux 多个战役，超过 8 小时的游玩时间，包括手工制作和过程内容。 一个详细和充分认知的世界和故事 —— 看看Lore page。 设计时考虑到了改造 —— 虽然在这方面还有更多的工作要做。 一个强大的二维图形引擎，可缩放，可扩展的用户界面，HiDPI 支持，和一个可交换的图形后端。 在非常温和的硬件，甚至软件渲染器上运行（尽管帧速率降低）。  GPLv3 许可证的源代码在 GitHub。Sulis 是用 Rust 编写的，脚本使用 Lua，大多数数据文件使用 YAML 格式。</description>
    </item>
    
    <item>
      <title>Rust GameDev 月刊 #2(译)</title>
      <link>/2020/01/20/rust-gamedev-%E6%9C%88%E5%88%8A-2%E8%AF%91/</link>
      <pubDate>Mon, 20 Jan 2020 13:21:58 +0800</pubDate>
      
      <guid>/2020/01/20/rust-gamedev-%E6%9C%88%E5%88%8A-2%E8%AF%91/</guid>
      <description>Rust GameDev #2 月刊 - 9 月 2019  2019-10-05
欢迎来到 Rust GameDev 工作组的月刊第二期。
Rust是一种追求三重性的系统语言：安全性、并发性和速度。这些目标与游戏开发非常一致。
我们希望为想在开发过程中，使用 Rust 的人建立一个吸引人的生态系统！想参与吗？加入 Rust GameDev working group!
游戏更新 # Veloren # Veloren是一个开放的世界，开源的多人像素 RPG。游戏处于开发的早期阶段，但可以玩。
九月的一些改进：
 完善多阶段城镇建设； 改进库存系统和角色创建； 在水、水物理、湖泊和河流方面取得了巨大进展！ 新的块数据结构； 三维地图和小地图； 第一人称观点； 弓箭； 性能优化；  新视频：&amp;ldquo;24 分钟的 Alpha Gameplay&amp;rdquo;.
完整的每周开发日志“本周在 Veloren…”：#31,#32,#33,#34,#35.
Zemeroth v0.6 # Zemeroth是一款回合制的极简 2d 战术游戏。
本月Zemeroth v0.6发布。此版本的主要功能包括：
 名望和 fighter 升级， 财产， 精灵帧和翻转， 状态效果图标。  阅读完整的 devlog post或观看the video version。
Twenty Asteroids #</description>
    </item>
    
    <item>
      <title>Rust GameDev 月刊 #1(译)</title>
      <link>/2020/01/19/rust-gamedev-%E6%9C%88%E5%88%8A-1%E8%AF%91/</link>
      <pubDate>Sun, 19 Jan 2020 10:35:38 +0800</pubDate>
      
      <guid>/2020/01/19/rust-gamedev-%E6%9C%88%E5%88%8A-1%E8%AF%91/</guid>
      <description>Rust GameDev #1 月刊 - 8 月 2019  2019 年 9 月 2 日
欢迎来到 Rust 游戏开发工作组月刊（希望如此！）的创刊号新闻稿。
Rust是一种追求三重性的系统语言：安全性、并发性和速度。这些目标与游戏开发非常一致。
我们希望为想在开发过程中，使用 Rust 的人建立一个吸引人的生态系统！想参与吗？加入 Rust GameDev working group!
新闻和博文 # the Rust GameDev Working Group 的调查问卷 📋 # 对在游戏开发中使用 Rust 感兴趣（可能已经投资了？）？请留出一点时间，来回答这个简短的调查，了解我们游戏开发生态系统的现状，以及游戏开发工作组可以做些什么，来培育它。🌱
尽管我们非常感谢您提供少量的信息，以便我们可以方便地与您联系进行进一步的讨论，但共享这些信息是可选的。这项调查中只有 3 个问题是强制性的，我们把最重要的问题留到最后。
目前正在处理问卷，以供稍后的发布。在调查结果公布并随后永久关闭之前，我们仍在接受回复。
_讨论：/r/rust,twitter_
还有，看看我们之前的帖子&amp;ldquo;欢迎 Rust Game Development Working Group&amp;rdquo;，如果你还没看到[/r/rust,twitter].
Rustsim #7 月刊 (June − July 2019) # nphysics 0.12 release 版本包含几个期待已久的功能：
 支持 colliders 的线性和非线性的*连续碰撞检测（CCD）*，在刚体和传感器。还有关于它的全新的用户手册。 刚体*速率降*：这允许人为地减慢一些物体的速度。这对于不能使用传统摩擦的自上而下二维游戏来说，是必不可少的。 刚体*最大速率*限制：有可能迫使一个刚体永远不会得到高于阈值的速度。 *自定义容器*有可能用于实体、colliders、关节和 force 生成器。这有助于克服与借用相关的一些困难，也有助于 npphysics 与其他解决方案的集成。物理世界结构将不再拥有这些容器。  与ncollide 0.</description>
    </item>
    
    <item>
      <title>Rust周报 321(译)</title>
      <link>/2020/01/16/rust%E5%91%A8%E6%8A%A5-321%E8%AF%91/</link>
      <pubDate>Thu, 16 Jan 2020 21:38:29 +0800</pubDate>
      
      <guid>/2020/01/16/rust%E5%91%A8%E6%8A%A5-321%E8%AF%91/</guid>
      <description>this-week-in-rust 日期：2020-01-14 原文：321 期  你好，欢迎再来一期*本周的螃蟹行情*！Rust是一种追求三位一体的系统语言：安全性、并发性和速度。这是它的进展和社区的每周总结。有什么要说的吗？推特@ThisWeekInRust或向我们发送请求。 想参与吗？我们热爱贡献.
*这本周的螃蟹行情*是在在 Github 上公开的。如果你在本周的问题中发现任何错误，请提交 PR。
Rust 社区的更新 新闻和博客文章  虚幻引擎中的 Rust 代码。 简介- Roguelike 教程。 迈向 Rust 基础。 Way Cooler 事后剖析。 Why Rust? I have a GC！ rust-analyzer changelog 7. 本月 Rust gamedev 5- 2019 年 12 月. RDBC 正迁往 Tokio. 用 Rust 和 Z3 合成 loop-free 程序. ESP32 上，集装箱型构建 for Rust. 在 Rust 内核中，实现协同调度。  一周一箱 这个星期的箱子是cxx，一个通过顾及两面，安全构建 C++ FFI 的库。
多亏了Ehsan M.</description>
    </item>
    
    <item>
      <title>Rust周报 320(译)</title>
      <link>/2020/01/10/rust%E5%91%A8%E6%8A%A5-320%E8%AF%91/</link>
      <pubDate>Fri, 10 Jan 2020 10:26:30 +0800</pubDate>
      
      <guid>/2020/01/10/rust%E5%91%A8%E6%8A%A5-320%E8%AF%91/</guid>
      <description>本周的螃蟹行情
日期：2020-01-07
原文：本周 Rust(螃蟹) 320
你好，欢迎再来一期*本周的螃蟹行情*！Rust是一种追求三位一体的系统语言：安全性、并发性和速度。这是它的进展和社区的每周总结。有什么要说的吗？推特@ThisWeekInRust或向我们发送请求。 想参与吗？我们热爱贡献.
*这本周的螃蟹行情*是在在 Github 上公开的。如果你在本周的问题中发现任何错误，请提交 PR。
Rust 社区的更新 新闻和博客文章  将 Quake 3 转换为 Rust。 减少对 32 位 Apple 目标的支持。 学习 Rust 的危险方法：让编译器完成工作。 互斥锁(Mutexes)比自旋锁(spinlocks)更快。 在 Rust 中编写操作系统：2019 年 12 月更新。 const 泛型进度更新。 Elastic 发布正式的 Elasticsearch Rust 客户端。 异步生态系统中的 Backpressure。 解释 Rust 中的 atomics。 宣布 ÄroRust —— 非官方的，Rust + 航空航天工作组。 Rust Belt Rust 2019 的视频，现已发布。 Rust 的 Result 类型入门。  周箱 这周的箱子是sqlx，现代的 SQL 客户端库。
谢谢扬·里默（Jan Riemer）的建议！</description>
    </item>
    
    <item>
      <title>Rust周报 319(译)</title>
      <link>/2020/01/03/rust%E5%91%A8%E6%8A%A5-319%E8%AF%91/</link>
      <pubDate>Fri, 03 Jan 2020 10:42:33 +0800</pubDate>
      
      <guid>/2020/01/03/rust%E5%91%A8%E6%8A%A5-319%E8%AF%91/</guid>
      <description>a { color: #804d0f;}  本周的螃蟹行情
日期：2019-12-31
原文：本周 Rust(螃蟹) 319
你好，欢迎再来一期*本周的螃蟹行情*！Rust是一种追求三位一体的系统语言：安全性、并发性和速度。这是它的进展和社区的每周总结。有什么要说的吗？推特@ThisWeekInRust或向我们发送请求。 想参与吗？我们热爱贡献.
*这本周的螃蟹行情*是在在 Github 上公开的。如果你在本周的问题中发现任何错误，请提交 PR。
Rust 社区的更新 新闻和博客文章  Rust 重写 m4vgalib。 一项思想实验：在游戏引擎之外使用 ECS 模式。 Spinlocks 被认为是有害的。 2020 年，ggez 的位置。 内部可变性模式。 Clippy 应该关心&amp;rsquo;他们&amp;rsquo;从何而来？ Rust 编写 AWS Lambda 函数。 Rust lifetimes 和 iterators。 Rocket 和多组形式。 Lyon 0.15.0- 新的 tessellator。 嵌入式 WG 的 Raspberry Pi OS 开发教程：教程 13 - 使用 QEMU 的内核单元，集成和控制台测试。 使用 Rust 和 Mynewt，优化 PineTime 的显示驱动程序。 嵌入式 WG 新闻通讯 22。 rust-analyzer changelog 5。 Rust in blockchain 7 - 2019 年 12 月。  周箱 这周的箱子是attohttpc，一个微小的同步 HTTP 客户端库。</description>
    </item>
    
    <item>
      <title>Rust周报 318(译)</title>
      <link>/2019/12/28/rust%E5%91%A8%E6%8A%A5-318%E8%AF%91/</link>
      <pubDate>Sat, 28 Dec 2019 11:40:52 +0800</pubDate>
      
      <guid>/2019/12/28/rust%E5%91%A8%E6%8A%A5-318%E8%AF%91/</guid>
      <description>a { color: #804d0f;}  本周的螃蟹行情
日期：2019-12-24
原文：本周 Rust(螃蟹) 318
你好，欢迎再来一期*本周的螃蟹行情*！Rust是一种追求三位一体的系统语言：安全性、并发性和速度。这是它的进展和社区的每周总结。有什么要说的吗？推特@ThisWeekInRust或向我们发送请求。 想参与吗？我们热爱贡献.
*这本周的螃蟹行情*是在在 Github 上公开的。如果你在本周的问题中发现任何错误，请提交 PR。
Rust 社区的更新 新闻和博客文章  🎈🎉宣布 Rust 1.40.0。🎉🎈 Rust 之危。 宣布 Tokio-Compat。 Haskell 和 Rust 中的 async exceptions。 actix-web v2.0 发布。 宣布正式的 MongoDB Rust 驱动程序。 JetBrains- Rustlings 课程改编。 在 Rust 中，编写 BPF 代码。 在 Rust 箱子中，测试 no_std 兼容性。 源代码链接：将 C headers 合并到 Rust 模块中。 使用 WASM 和 Cloudflare 的无服务器 Rust。 使用 Rust，将 JavaScript 应用程序移植到 WebAssembly（第 1 部分）。 深入探讨：编译的 Rust p1。 Formatting 编译器树。 Streams 并发。 在 Rust 中，写一个 seqlock。 Vishay 的 VEML6030 和 VEML7700 环境光传感器的平台驱动程序。 PCA9685 16-channel，PWM LED/servo 电机控制器驱动器。 祝贺，编译器团队成员 matthewjasper 和 wesleywiser。  周箱 这周的箱子是cargo-scout，一个 cargo 子命令，仅在箱子的更改代码上，运行 clippy（在 git diff 之后）。</description>
    </item>
    
    <item>
      <title>Rust周报 317(译)</title>
      <link>/2019/12/21/rust%E5%91%A8%E6%8A%A5-317%E8%AF%91/</link>
      <pubDate>Sat, 21 Dec 2019 11:01:11 +0800</pubDate>
      
      <guid>/2019/12/21/rust%E5%91%A8%E6%8A%A5-317%E8%AF%91/</guid>
      <description>本周的螃蟹行情
日期：2019-12-17
原文：本周 Rust(螃蟹) 317
你好，欢迎再来一期*本周的螃蟹行情*！Rust是一种追求三位一体的系统语言：安全性、并发性和速度。这是它的进展和社区的每周总结。有什么要说的吗？推特@ThisWeekInRust或向我们发送请求。 想参与吗？我们热爱贡献.
*这本周的螃蟹行情*是在在 Github 上公开的。如果你在本周的问题中发现任何错误，请提交 PR。
Rust 社区的更新 新闻和博客文章  用 cargo-bisect-rustc 对分 Rust 编译器 regressions。 不用再担心阻塞了：受 Go 启发的新 async-std runtime。 从零到 main()：裸机 Rust。 WASM 为抽象平台。 gtk-rs 新版本：简化以及更多功能。 宣布 Mio 0.7-alpha.1。 Rendology 简介：基于 Glium 的渲染管道。 常见的 Rust traits。 用 Rust 解决 Burger 问题。 将 druid Rust 小部件移植到 PineTime 智能手表。 Relm 教程。 为什么 Rust 似乎会启发人们？  周箱 这周的箱子是bstr，不要求是有效的 UTF-8 的， Rust 字符串类型。
谢谢威利·卡普勒的建议！
提交您下周的建议和投票！
呼吁参与 一直想为开源项目做贡献，但不知道从哪里开始？每周我们都会重点介绍 Rust 社区的一些任务，供您选择和开始！</description>
    </item>
    
    <item>
      <title>Rust周报 316(译)</title>
      <link>/2019/12/15/rust%E5%91%A8%E6%8A%A5-316%E8%AF%91/</link>
      <pubDate>Sun, 15 Dec 2019 17:01:31 +0800</pubDate>
      
      <guid>/2019/12/15/rust%E5%91%A8%E6%8A%A5-316%E8%AF%91/</guid>
      <description>本周的螃蟹行情
日期：2019-12-10
原文：本周 Rust(螃蟹) 316
你好，欢迎再来一期*本周的螃蟹行情*！Rust是一种追求三位一体的系统语言：安全性、并发性和速度。这是它的进展和社区的每周总结。有什么要说的吗？推特@ThisWeekInRust或向我们发送请求。 想参与吗？我们热爱贡献.
*这本周的螃蟹行情*是在在 Github 上公开的。如果你在本周的问题中发现任何错误，请提交 PR。
Rust 社区的更新 新闻和博客文章  如何在 2019 年，最后一次加速 Rust 编译器。 Formatting 对于嵌入式 Rust 来说，是不合理的昂贵。 1Password X Manager 的某些部分已用 Rust 重写。 宣布具有完整异步/等待支持的 hyper v0.13。 阻塞内部异步代码。 宣布 docs.rs 团队。 编写最慢的快速排序。 Rust 库中的健全性错误：不能与&amp;rsquo;em 一起生活，活着不能没有&amp;rsquo;em。 Rust 中 3.5 KB 的，微小 Windows 可执行文件。 Embark 内部的 Rust。 Tokio 0.2 - Rust 崩溃课程。 推广 基于 autoref 的规范。 A rusty radio：Si4703 FM 收音机 receiver 驱动程序。  ＃Rust2020 查找位于＃Rust2020 的所有帖子读 Rust。</description>
    </item>
    
    <item>
      <title>Rust周报 315(译)</title>
      <link>/2019/12/06/rust%E5%91%A8%E6%8A%A5-315%E8%AF%91/</link>
      <pubDate>Fri, 06 Dec 2019 09:55:24 +0800</pubDate>
      
      <guid>/2019/12/06/rust%E5%91%A8%E6%8A%A5-315%E8%AF%91/</guid>
      <description>本周的螃蟹行情
日期：2019-12-03
原文：本周 Rust(螃蟹) 315
你好，欢迎再来一期*本周的螃蟹行情*！Rust是一种追求三位一体的系统语言：安全性、并发性和速度。这是它的进展和社区的每周总结。有什么要说的吗？推特@ThisWeekInRust或向我们发送请求。 想参与吗？我们热爱贡献.
*这本周的螃蟹行情*是在在 Github 上公开的。如果你在本周的问题中发现任何错误，请提交 PR。
Rust 社区的更新 新闻和博客文章  现在默认情况下，nightly 版本进行常数传播。 Redox 操作系统：真正的硬件突破，并专注于 rustc。 使用 Rust 将 ML 投入生产：提速 25 倍。 如何 RiiR。 发起 2019 年 Rust 状况调查。 宣布 http v0.2。 用 Rust 和 async/await 实现 pid1。 潮流：现在和未来。 让我们用 Rust 语言加上 Wrap ，创建一个简单的身份验证服务器。 与 Future 融为一体 —— Rust 速成课程 8。 嵌入式 WG 新闻通讯 21。  ＃Rust2020 查找位于＃Rust2020 的所有帖子读 Rust。
周箱 这周的箱子是joinery，用于泛型字符串连接的库。
谢谢内森·韦斯特的建议！
提交您下周的建议和投票！</description>
    </item>
    
    <item>
      <title>Rust周报 314(译)</title>
      <link>/2019/11/29/rust%E5%91%A8%E6%8A%A5-314%E8%AF%91/</link>
      <pubDate>Fri, 29 Nov 2019 10:28:22 +0800</pubDate>
      
      <guid>/2019/11/29/rust%E5%91%A8%E6%8A%A5-314%E8%AF%91/</guid>
      <description>本周的螃蟹行情
日期：2019-11-26
原文：本周 Rust(螃蟹) 314
你好，欢迎再来一期*本周的螃蟹行情*！Rust是一种追求三位一体的系统语言：安全性、并发性和速度。这是它的进展和社区的每周总结。有什么要说的吗？推特@ThisWeekInRust或向我们发送请求。 想参与吗？我们热爱贡献.
*这本周的螃蟹行情*是在在 Github 上公开的。如果你在本周的问题中发现任何错误，请提交 PR。
Rust 社区的更新 新闻和博客文章  Tokio 路线图到 1.0。 每六周运输一次编译器。 nightly rust 版本下，在常数中的if和match。 迈向，反应式 UI 的统一理论。 测量错误处理库。 将 librsvg 移植到 Rust：重构 Length 类型。 通过将 C 转换为 Rust 获得的经验教训。 在 Rust 中，是如何 panic 的。 整洁的 Rust 技巧：将 Rust 闭包传递给 C。 将 gnome-shell&amp;rsquo;s styles 移至 Rust。 Async-awaitifying 一个 Rust CLI 应用。 为 PineTime 的触摸控制器，构建 Rust 驱动程序。 RustFest Barcelona 谈话录音，现已推出。 Cryptowatch 赞助了 Rust GUI 库 iced 的开发。  ＃Rust2020 查找位于＃Rust2020 的所有帖子读 Rust。</description>
    </item>
    
    <item>
      <title>Rust周报 313(译)</title>
      <link>/2019/11/22/rust%E5%91%A8%E6%8A%A5-313%E8%AF%91/</link>
      <pubDate>Fri, 22 Nov 2019 11:47:05 +0800</pubDate>
      
      <guid>/2019/11/22/rust%E5%91%A8%E6%8A%A5-313%E8%AF%91/</guid>
      <description>本周的螃蟹行情
日期：2019-11-19
原文：本周 Rust(螃蟹) 313
你好，欢迎再来一期*本周的螃蟹行情*！Rust是一种追求三位一体的系统语言：安全性、并发性和速度。这是它的进展和社区的每周总结。有什么要说的吗？推特@ThisWeekInRust或向我们发送请求。 想参与吗？我们热爱贡献.
*这本周的螃蟹行情*是在在 Github 上公开的。如果你在本周的问题中发现任何错误，请提交 PR。
Rust 社区的更新 新闻和博客文章  Stacked borrows：Rust 的 aliasing 模型。 使用 const 泛型，实现 ArrayVec。 关于 Rust 中，错误处理的思考。 了解 Serde。 rust-analyzer：Find 用法。 Global executors。 Rust 基础架构团队：执行 GitHub 的操作。 Rust bug 最小化模式。 使用 PineTime 智能手表，在 IoT 中教授 Rust。  ＃Rust2020 查找位于＃Rust2020 Read Rust的所有帖子。
周箱 这周的箱子是wasmtime，这是 WebAssembly 的独立 JIT 风格的运行时。
谢谢乔什·特里维特（Josh Triplett）的建议！
Submit your suggestions and votes for next week！
呼吁参与 一直想为开源项目做贡献，但不知道从哪里开始？每周我们都会重点介绍 Rust 社区的一些任务，供您选择和开始！</description>
    </item>
    
    <item>
      <title>Rust周报 312(译)</title>
      <link>/2019/11/16/rust%E5%91%A8%E6%8A%A5-312%E8%AF%91/</link>
      <pubDate>Sat, 16 Nov 2019 20:44:26 +0800</pubDate>
      
      <guid>/2019/11/16/rust%E5%91%A8%E6%8A%A5-312%E8%AF%91/</guid>
      <description>本周的螃蟹行情
日期：2019-11-12
原文：本周 Rust(螃蟹) 312
你好，欢迎再来一期*本周的螃蟹行情*！Rust是一种追求三位一体的系统语言：安全性、并发性和速度。这是它的进展和社区的每周总结。有什么要说的吗？推特@ThisWeekInRust或向我们发送请求。 想参与吗？我们热爱贡献.
*这本周的螃蟹行情*是在在 Github 上公开的。如果你在本周的问题中发现任何错误，请提交 PR。
Rust 社区的更新 新闻和博客文章  🎈🎉宣布 Rust 1.39.0。🎉🎈 stable Rust 版本上的，Async-await。 宣布 async-std 1.0。 发布了 Futures 0.3（具有 async/await 支持）。 比较 Rust 和 C ++ 并发。 在 Rust 中，使用类型级编程，来进行更安全的硬件抽象。 揭开 async Rust 的神秘面纱。 Mors Servo 提供的 librsvg 中的 CSS，现在已使用 Rust 。 Swift 如何在 Rust 无法实现的地方，实现动态链接。 对 Windows 代码库的底层系统组件，进行实验性重写。 iou：用于 liburing 的 Rust 绑定。 在 Rust 中，泛化协程。 关于 Rust 中的类型布局和 ABI 的注释。 使用 eBPF，将 Rust 放入内核。 运动控制历险记：使用 G-Code。 使用 Meili，搜索 Rust 箱子。  ＃Rust2020 查找位于＃Rust2020 Read Rust的所有帖子。</description>
    </item>
    
    <item>
      <title>Rust周报 311(译)</title>
      <link>/2019/11/07/rust%E5%91%A8%E6%8A%A5-311%E8%AF%91/</link>
      <pubDate>Thu, 07 Nov 2019 10:04:45 +0800</pubDate>
      
      <guid>/2019/11/07/rust%E5%91%A8%E6%8A%A5-311%E8%AF%91/</guid>
      <description>本周的螃蟹行情
日期：2019-11-05
原文：本周 Rust(螃蟹) 311
你好，欢迎再来一期*本周的螃蟹行情*！Rust是一种追求三位一体的系统语言：安全性、并发性和速度。这是它的进展和社区的每周总结。有什么要说的吗？推特@ThisWeekInRust或向我们发送请求。 想参与吗？我们热爱贡献.
*这本周的螃蟹行情*是在在 Github 上公开的。如果你在本周的问题中发现任何错误，请提交 PR。
Rust 社区的更新 新闻和博客文章  完成向新借用检查器的过渡。 C ++ WinRT 的作者对 Windows Runtime 的 Rust 支持。 你可能不想要.into_iter().cloned()。 Clippy 正在删除其插件界面。 Rust 并发模式：condvars 和 locks。 如何使您的 C 代码库吃上螃蟹：用 Rust 重写键盘固件 keymap。 编写 bump 分配器时，请始终向下。 运动控制历险记：初始运动系统。 2019-10-24 编译器团队会议。  ＃Rust2020 查找位于＃Rust2020 Read Rust的所有帖子。
周箱 这周的箱子是displaydoc，一个程序派生宏，通过 doc 注释的字符串-插值，来实现Display。
谢谢威利·卡普勒的建议！
提交您下周的建议和投票！
呼吁参与 一直想为开源项目做贡献，但不知道从哪里开始？每周我们都会重点介绍 Rust 社区的一些任务，供您选择和开始！
其中一些任务也可能有导师，请访问任务页面以获取更多信息。
 宣布 safety-dance ：从流行的箱子中，删除不必要的不安全代码。 RFC：使 Cargo 在已编译的二进制文件中，嵌入依赖项的版本。 [good first issue] cargo-sweep: cargo-sweep 能不带上 rustup 工作吗？ [good first issue] rubble: 添加一个函数，用来读取到 rubble-nrf52 的设备地址。 [good first issue] rubble: 不要放弃，即使错过了初始发送窗口「initial transmit window」。 [good first issue] rubble: 当 event is missed，llcp updates 就不会应用。 [good first issue] rubble: log 缓存溢出，位于 nrf52832。 [good first issue] rubble: 试用 scroll 或 zerocopy，用来 pdus 的 de/encoding{解/编码}。 [good first issue] rubble: 只响应 ll_version_ind 一次。  如果您是 Rust 项目的所有者并且正在寻找贡献者，请提交任务这里。</description>
    </item>
    
    <item>
      <title>Rust周报 310(译)</title>
      <link>/2019/10/31/rust%E5%91%A8%E6%8A%A5-310%E8%AF%91/</link>
      <pubDate>Thu, 31 Oct 2019 23:02:52 +0800</pubDate>
      
      <guid>/2019/10/31/rust%E5%91%A8%E6%8A%A5-310%E8%AF%91/</guid>
      <description>本周的螃蟹行情
日期：2019-10-29
原文：本周 Rust(螃蟹) 310
你好，欢迎再来一期*本周的螃蟹行情*！Rust是一种追求三位一体的系统语言：安全性、并发性和速度。这是它的进展和社区的每周总结。有什么要说的吗？推特@ThisWeekInRust或向我们发送请求。 想参与吗？我们热爱贡献.
*这本周的螃蟹行情*是在在 Github 上公开的。如果你在本周的问题中发现任何错误，请提交 PR。
Rust 社区的更新 新闻和博客文章  征集：博客 2020 。 为什么 trait 中的 async fn 很难。 Rust 实现 Spark 的结果令人鼓舞。 Nannou 授予 Mozilla 拨款， Rust 中的基础音频开发。 Rust 和 C ++上的浮点数密集型代码。 docs.rs 中断，事后评估。 rust-analyzer 的成本。 为 Druid 构建小部件（一个 WIP 本机 Rust GUI 工具包）。 Ferris Fencing - 基于 RISC-V VM 的 Rust 游戏。 安全技术，在稳定的编译器进行专业化工作。 仔细研究 Rust 的所有权。 Servo 编程：timer 不可思议的缩减。 履行 momo 的编译时承诺。 运动控制历险记：初始运动系统。 请欢迎 pnkfelix，作为编译器团队的共同负责人。  周箱 可悲的是，没有周箱建议。</description>
    </item>
    
    <item>
      <title>Rust周报 309(译)</title>
      <link>/2019/10/24/rust%E5%91%A8%E6%8A%A5-309%E8%AF%91/</link>
      <pubDate>Thu, 24 Oct 2019 17:55:15 +0800</pubDate>
      
      <guid>/2019/10/24/rust%E5%91%A8%E6%8A%A5-309%E8%AF%91/</guid>
      <description>本周的螃蟹行情
日期：2019-10-22
原文：本周 Rust(螃蟹) 309
你好，欢迎再来一期*本周的螃蟹行情*！Rust是一种追求三位一体的系统语言：安全性、并发性和速度。这是它的进展和社区的每周总结。有什么要说的吗？推特@ThisWeekInRust或向我们发送请求。 想参与吗？我们热爱贡献.
*这本周的螃蟹行情*是在在 Github 上公开的。如果你在本周的问题中发现任何错误，请提交 PR。
Rust 社区的更新 新闻和博客文章  我使用生成器，制作了一个 Rust 的 NES 模拟器。 rustc 把时间花在了哪些地方。 进度：2019 年编译器路线图。 进度：const 泛型更新。 异步析构函数。 使用 Rust 和 WebAssembly 的微型静态全文搜索引擎。 MicroRust：在 BBC micro:bit 上，通过 Rust 探索微控制器的世界。 在 Linux 中，处理进程终止。 嵌入式 WG 的操作系统教程重写，对 Raspberry Pi 4 的添加支持。 运动控制历险记：简单的自动化序列 编程 Servo ：运送信息端口（通过一个 detour{绕行}进入 Spectre）。 嵌入式 Rust 中的 Rotary 编码器。  本周箱子 这周的箱子是grubbnet，一个用于网络应用程序和游戏的 TCP 客户端/服务器库。
谢谢Dooskington的建议！
提交您下周的建议和投票！
呼吁参与 总是想为开源项目做出贡献，但不知道从哪里开始？每周我们都会强调一些来自 Rust 社区的任务，供您挑选并开始！</description>
    </item>
    
    <item>
      <title>Rust周报 308(译)</title>
      <link>/2019/10/19/rust%E5%91%A8%E6%8A%A5-308%E8%AF%91/</link>
      <pubDate>Sat, 19 Oct 2019 22:16:31 +0800</pubDate>
      
      <guid>/2019/10/19/rust%E5%91%A8%E6%8A%A5-308%E8%AF%91/</guid>
      <description>本周的螃蟹行情
日期：2019-10-15
原文：本周 Rust(螃蟹) 308
你好，欢迎再来一期*本周的螃蟹行情*！Rust是一种追求三位一体的系统语言：安全性、并发性和速度。这是它的进展和社区的每周总结。有什么要说的吗？推特@ThisWeekInRust或向我们发送请求。 想参与吗？我们热爱贡献.
*这本周的螃蟹行情*是在在 Github 上公开的。如果你在本周的问题中发现任何错误，请提交 PR。
Rust 社区的更新 新闻和博客文章  使 Tokio scheduler 快 10 倍。 在 2019 年，如何进一步加快 Rust 编译器的速度。 node 实验 - 使用 Rust 探索异步基础知识。 在 CLion 中，调试 Rust 代码。 我最喜欢的 rust 函数std::mem::drop。 sodiumoxide 中的漏洞：generichash::Digest::eq 始终返回 true。 使用 Rust 的 RISC-V OS：Communications。 将一个箱子从 futures 0.1 迁移到 0.3。 运动控制历险记：通信系统第 2 部分。 宣布 Rustup 1.20.0。 新的 VxWorks 版本，支持 Rust。 AWS 赞助 Rust 项目。  本周的箱子 这周，我们不是一个，也不是两个，而是*三个*箱子！有Watt，一个基于 WASM 的快速 proc-macro 运行时，Anyhow，为另一个错误处理箱，和spotify-tui，Spotify 的控制台用户界面。</description>
    </item>
    
    <item>
      <title>Rust周报 307(译)</title>
      <link>/2019/10/10/rust%E5%91%A8%E6%8A%A5-307%E8%AF%91/</link>
      <pubDate>Thu, 10 Oct 2019 23:09:19 +0800</pubDate>
      
      <guid>/2019/10/10/rust%E5%91%A8%E6%8A%A5-307%E8%AF%91/</guid>
      <description>本周的螃蟹行情
日期：2019-10-08
原文：本周 Rust(螃蟹) 307
你好，欢迎再来一期*本周的螃蟹行情*！Rust是一种追求三位一体的系统语言：安全性、并发性和速度。这是它的进展和社区的每周总结。有什么要说的吗？推特@ThisWeekInRust或向我们发送请求。 想参与吗？我们热爱贡献.
*这本周的螃蟹行情*是在在 Github 上公开的。如果你在本周的问题中发现任何错误，请提交 PR。
Rust 社区的更新 新闻和博客文章  宣布 Inside Rust 博客。 Async 基础更新：完善的时间。 通过 cargo-audit 0.9 确保 Rust 项目的安全：依赖树，core advisories，未维护的箱子。 为 Rust 设计一个 COM 库。 Tonic：gRPC 已进入 async/await 状态。 带 async/await 的 reqwest alpha 已发布。 在 Rust 中，编写操作系统 - 2019 年 9 月更新。 静态断言 1.0 发布。 所有权和 impl Trait。 在 Rust 中，编写 HTTP 服务器（第 1 部分）。 运动控制历险记：通信系统第 1 部分。 在 Visual Studio Code 上，使用 Rust 和 Apache Mynewt 编码 nRF52。 本月在 Rust GameDev 2 中-2019 年 9 月。 嵌入式工作组新闻通讯 19。 Rust 现在有超过 100000 次提交。 [pdf] 利用Rust类型进行模块化规格和验证。  本周的箱子 这周的箱子是algebraics，用于无穷精度计算的，纯 Rust 代数数字库。</description>
    </item>
    
    <item>
      <title>Rust周报 306(译)</title>
      <link>/2019/10/04/rust%E5%91%A8%E6%8A%A5-306%E8%AF%91/</link>
      <pubDate>Fri, 04 Oct 2019 15:35:58 +0800</pubDate>
      
      <guid>/2019/10/04/rust%E5%91%A8%E6%8A%A5-306%E8%AF%91/</guid>
      <description>本周的螃蟹行情
日期：2019-10-01
原文：本周 Rust(螃蟹) 305
你好，欢迎再来一期*本周的螃蟹行情*！Rust是一种追求三位一体的系统语言：安全性、并发性和速度。这是它的进展和社区的每周总结。有什么要说的吗？推特@ThisWeekInRust或向我们发送请求。 想参与吗？我们热爱贡献.
*这本周的螃蟹行情*是在在 Github 上公开的。如果你在本周的问题中发现任何错误，请提交 PR。
Rust 社区的更新 新闻和博客文章  🎈🎉宣布 Rust 1.38.0。🎉🎈 Cargo 安全咨询。 Async-await 处于 beta。 Rust 引用类型的精确心智模型。 对抗 Async 碎片。 使用 Rust 制作 RISC-V 操作系统。 Rust 中的插件。 用 Rust，构建 Azure IoT Edge 安全守护程序。 运动控制历险记：FPS 计数器。 因果分析 Rust 代码。 gfx-rs 2019 更新。 宣布 Drone OS - 用 Rust 编写的实时应用程序的嵌入式操作系统。  本周的箱子 这周的箱子是pin-project，一份程序宏衍生品，符合人体工程学且安全Pin预测。
谢谢克里希纳（Krishna Sannasi）的建议！
提交您下周的建议和投票！
呼吁参与 总是想为开源项目做出贡献，但不知道从哪里开始？每周我们都会强调一些来自 Rust 社区的任务，供您挑选并开始！
其中一些任务也可能会有指导者，请访问任务页，了解更多信息。
 Vector：更新stdin源码使用线程，而不是使用 tokio 版本。Vector 是一种高性能的可观察性的数据路由器。 mundane：启用所有功能的 docs.</description>
    </item>
    
    <item>
      <title>Rust周报 305(译)</title>
      <link>/2019/09/26/rust%E5%91%A8%E6%8A%A5-305%E8%AF%91/</link>
      <pubDate>Thu, 26 Sep 2019 17:01:18 +0800</pubDate>
      
      <guid>/2019/09/26/rust%E5%91%A8%E6%8A%A5-305%E8%AF%91/</guid>
      <description>本周的螃蟹行情
日期：2019-09-24
原文：本周 Rust(螃蟹) 305
你好，欢迎再来一期*本周的螃蟹行情*！Rust是一种追求三位一体的系统语言：安全性、并发性和速度。这是它的进展和社区的每周总结。有什么要说的吗？推特@ThisWeekInRust或向我们发送请求。 想参与吗？我们热爱贡献.
*这本周的螃蟹行情*是在在 Github 上公开的。如果你在本周的问题中发现任何错误，请提交 PR。
Rust 社区的更新 新闻和博客文章  LLVM：缩小差距 - Rust 和 C / C ++之间的跨语言 LTO。 Weld：使用 Rust 和 LLVM 将 numpy，scikit 和 pandas 加速多达 100 倍。 声明式内存管理。 泛型新类型：一种解决 orphan 规则的方法。 Async 构建器。 Adventures in motion control：顶层基础架构。 使用 Apache Mynewt 和 Embedded Rust 在 STM32 L476 上，构建 NB-IoT GPS 跟踪器。 导航到 Rust OSS 社区。  本周的箱子 本周的箱子是runtime，是面向实验性的热加载的运行时。
谢谢维克兰特的建议！
提交您下周的建议和投票！
呼吁参与 总是想为开源项目做出贡献，但不知道从哪里开始？每周我们都会强调一些来自 Rust 社区的任务，供您挑选并开始！</description>
    </item>
    
    <item>
      <title>Rust周报 304(译)</title>
      <link>/2019/09/19/rust%E5%91%A8%E6%8A%A5-304%E8%AF%91/</link>
      <pubDate>Thu, 19 Sep 2019 22:15:46 +0800</pubDate>
      
      <guid>/2019/09/19/rust%E5%91%A8%E6%8A%A5-304%E8%AF%91/</guid>
      <description>本周的螃蟹行情
日期：2019-09-17
原文：本周 Rust(螃蟹) 304
你好，欢迎再来一期*本周的螃蟹行情*！Rust是一种追求三位一体的系统语言：安全性、并发性和速度。这是它的进展和社区的每周总结。有什么要说的吗？推特@ThisWeekInRust或向我们发送请求。 想参与吗？我们热爱贡献.
*这本周的螃蟹行情*是在在 Github 上公开的。如果你在本周的问题中发现任何错误，请提交 PR。
Rust 社区的更新 新闻和博客文章  即将发布的 docs.rs 变化。 Rust 的 GitHub Actions。 Rustconf 2019 视频。 改进了 Rust 和 C2Rust 中的 C 变量。 Oreboot：Coreboot 减去 C，Google 的一次演讲。 宣布 awesome-rust-mentors。 运动控制中的冒险。  本周的箱子 本周的箱子是texture-synthesis，一个通过选择示例，生成纹理的程序。
谢谢威利卡普勒的建议！
提交下周的建议和投票！
呼吁参与 总是想为开源项目做出贡献，但不知道从哪里开始？每周我们都会强调一些来自 Rust 社区的任务，供您挑选并开始！
其中一些任务也可能会有指导者，请访问任务页，了解更多信息。
 Rustup 需要你的帮助（测试一个新功能）。 Rustup 需要你的帮助（测试一个新功能，第二部分）。 通知：寻找维护者。Notify 是 Rust 的跨平台文件系统通知库。  如果您是 Rust 项目所有者并且正在寻找贡献者，请提交任务这里。
Rust Core 的更新 在上周合并了有 282 个请求
 rustc：允许使用 wasm32-wasi 的 cdylib 箱子类型 隐藏 &amp;ndash;cfg 解析期间，发出的诊断信息 改善alloc::format!</description>
    </item>
    
    <item>
      <title>Rust周报 303(译)</title>
      <link>/2019/09/12/rust%E5%91%A8%E6%8A%A5-303%E8%AF%91/</link>
      <pubDate>Thu, 12 Sep 2019 10:57:01 +0800</pubDate>
      
      <guid>/2019/09/12/rust%E5%91%A8%E6%8A%A5-303%E8%AF%91/</guid>
      <description>本周的螃蟹行情
日期：2019-09-10
原文：本周 Rust(螃蟹) 303
你好，欢迎再来一期*本周的螃蟹行情*！Rust是一种追求三位一体的系统语言：安全性、并发性和速度。这是它的进展和社区的每周总结。有什么要说的吗？推特@ThisWeekInRust或向我们发送请求。 想参与吗？我们热爱贡献.
*这本周的螃蟹行情*是在在 Github 上公开的。如果你在本周的问题中发现任何错误，请提交 PR。
Rust 社区的更新 新闻和博客文章  Rust 如何优化 async/await II：程序分析。 在 ESP32 上的 Rust。 Linux.Fe2O3：一个 Rust 病毒。 改善一个箱子的编译时间。 hyper 0.13 alpha 支持 async/await。 Rust 编写操作系统：2019 年 8 月更新。 大型组织中的 Rust - 会议记录。 Futures 并发。  本周的箱子 本周的箱子是viu，终端图像查看器。
谢谢威利卡普勒建议！
提交下周的建议和投票！
呼吁参与 总是想为开源项目做出贡献，但不知道从哪里开始？每周我们都会强调一些来自 Rust 社区的任务，供您挑选并开始！
其中一些任务也可能会有指导者，请访问任务页，了解更多信息。
 请求帮助，为 GCC 实现一个独立的 Rust 前端。 Rusoto：寻找维护者。  如果你是一个 Rust 项目的所有者，并且正在寻找贡献者，请在这里提交任务。
Rust Core 的更新 在上周合并了 303 个请求</description>
    </item>
    
    <item>
      <title>关于Rust项目肥大的思考(译)</title>
      <link>/2019/09/05/%E5%85%B3%E4%BA%8Erust%E9%A1%B9%E7%9B%AE%E8%82%A5%E5%A4%A7%E7%9A%84%E6%80%9D%E8%80%83%E8%AF%91/</link>
      <pubDate>Thu, 05 Sep 2019 10:52:40 +0800</pubDate>
      
      <guid>/2019/09/05/%E5%85%B3%E4%BA%8Erust%E9%A1%B9%E7%9B%AE%E8%82%A5%E5%A4%A7%E7%9A%84%E6%80%9D%E8%80%83%E8%AF%91/</guid>
      <description>关于 Rust 项目大小膨胀的思考 2019 年 8 月 21 日 ❤️ 原文
我要接受了一个PR，这将加快了 druid 的编译时间，约 3 倍，而其可执行文件大小则变为近乎 2 倍。在这种情况下，我认为需要权衡一下（没有国际化，这个 GUI 工具包严格上来说，是一个玩具），但膨胀使我不高兴，我认为有改善 Rust 生态系统的空间。
我们应该关心吗？ 对我来说，rust 中的膨胀主要是关于编译时间和可执行文件大小。关于编译时间的十大挑战，其中含有 Rust 的开发经验，但在某种程度上，它是由开发人员控制的，特别是选择那些臃肿的箱子。
膨胀是软件中的一个常见问题，但有一些事情使它在 Rust ，会是一个更大挑战：
 Cargo 很容易就够到箱子。 泛型，特别是单态化。 不支持动态库。  对编译时间影响的一个更微妙的方法是，使用像 rls 这样的工具。
这会因人而异，但我个人很在乎。我希望 XI 编辑器的核心是轻量级，特别是当我们能够考虑 UI 之类的问题时。但是，现在发布的二进制文件是 5.9M（发布版本，Windows，不包括语法着色，而这是额外的 2.1M）。为了减少膨胀，我在 Rust 生态系统中做了很多其他的事情，在这篇文章中，我会吹嘘一下。
功能 vs 膨胀 当然，我之所以考虑在 druid 上，进行如此大的编译时间跳跃，是因为我想要国际化，这是一个重要而复杂的特性。正确地进行这项工作，需要相当多的逻辑，其中包括区域匹配、Unicode 和自然语言处理（如复数规则）的。我没有*期待过*会有一个小箱子，能帮我做到这些。
最近我们看到的一个类似的权衡是，pulldown-cmark 关于Unicase dep 增加了 50K二进制文件大小。在这种情况下，CommonMark 规范要求 Unicode 大小写折叠，如果没有这个，它将不再符合标准。我理解这种不去匹配的诱惑，但我认为，不符合规范的版本是一件坏事，尤其是对世界上大多数母语不是英语的人不友好。
因此，重要的是，不要将精益求精与缺乏重要特性混为一谈。真正要说的是，膨胀是不必要的资源消耗，超出了满足需求所必需的范围。Unicode 和国际化是一个特别有争议的问题，这不仅是因为它们实际上，需要代码和数据才能正确处理，而且还因为它们有很大的膨胀量。
作&amp;rsquo;廋子&amp;rsquo;的基础箱子 我将对“基础”箱子有更高的标准，这些箱子会给多数 Rust 应用所使用。*不*使用依赖关系会是一个膨胀关注点，或者根据需求和对膨胀的容忍度，将生态系统分割成不同的解决方案。</description>
    </item>
    
    <item>
      <title>Rust周报 302(译)</title>
      <link>/2019/09/04/rust%E5%91%A8%E6%8A%A5-302%E8%AF%91/</link>
      <pubDate>Wed, 04 Sep 2019 21:39:23 +0800</pubDate>
      
      <guid>/2019/09/04/rust%E5%91%A8%E6%8A%A5-302%E8%AF%91/</guid>
      <description>本周的螃蟹行情
日期：2019-09-03
原文：本周 Rust(螃蟹) 302
你好，欢迎再来一期*本周的螃蟹行情*！Rust是一种追求三位一体的系统语言：安全性、并发性和速度。这是它的进展和社区的每周总结。有什么要说的吗？推特@ThisWeekInRust或向我们发送请求。 想参与吗？我们热爱贡献.
*这本周的螃蟹行情*是在在 Github 上公开的。如果你在本周的问题中发现任何错误，请提交 PR。
Rust 社区的更新 新闻和博客文章  Rust Web 应用程序简介。 本月 Rust GameDev＃1 - 2019 年 8 月。 HHVM 正将其部分 OCaml 代码，重写为 Rust。 宣布 cargo-udeps。 宣布 structopt 0.3。 Rust 中的语义验证。 STM32 Blue Pill 上的低功率 NB-IoT，带有 Apache Mynewt 和嵌入式 Rust。  本周的箱子 本周的箱子是cargo-udeps，Cargo 子命令，用于查找未使用的依赖项。
谢谢克里斯托弗达勒姆建议！
提交下周的建议和投票！
呼吁参与 总是想为开源项目做出贡献，但不知道从哪里开始？每周我们都会强调一些来自 Rust 社区的任务，供您挑选并开始！
其中一些任务也可能会有指导者，请访问任务页，了解更多信息。
_没有针对 CFP 提出任何问题_。
如果你是一个 Rust 项目的所有者，并且正在寻找贡献者，请在这里提交任务。
Rust Core 的更新 在上周合并了 214 个请求</description>
    </item>
    
    <item>
      <title>Rust周报 301(译)</title>
      <link>/2019/09/04/rust%E5%91%A8%E6%8A%A5-301%E8%AF%91/</link>
      <pubDate>Wed, 04 Sep 2019 14:07:11 +0800</pubDate>
      
      <guid>/2019/09/04/rust%E5%91%A8%E6%8A%A5-301%E8%AF%91/</guid>
      <description>本周的螃蟹行情
2019 年 8 月 27 日
原文：本周 Rust(螃蟹) 301
你好，欢迎再来一期*本周的螃蟹行情*！Rust是一种追求三位一体的系统语言：安全性、并发性和速度。这是它的进展和社区的每周总结。有什么要说的吗？推特@ThisWeekInRust或向我们发送请求。 想参与吗？我们热爱贡献.
*本周的螃蟹行情*是在在 Github 上公开的。如果你在本周的问题中发现任何错误，请提交 PR.
来自 Rust 社区的更新 新闻和博客文章  小 Rust 结构，应通过复制或借用传递？ 关于 Rust bloat 的思考. Rust GUI 生态系统概述. c2rust 简介. Rust 中的异步堆栈跟踪. 小规模科学计算的案例研究 - Polsim. Rust 中的内存管理：实体组件系统(ECS). 实际上使用 Crev，或者，信任软件依赖性的问题. 2019 年 COSCUP “一切尽在 Rust”回顾.  本周的箱子 本周的箱子是include_flate，include_bytes!/include_str的变体，会在编译时压缩，和运行时延迟解压。
多亏了威利·卡普勒提交了这个建议！
提交你下周的建议和投票！
呼吁参与 总是想为开源项目做出贡献，但不知道从哪里开始？每周我们都会强调一些来自 Rust 社区的任务，供您挑选并开始！
其中一些任务也可能会有指导者，请访问任务页，了解更多信息。
_没有针对 CFP 提出任何问题_。
如果你是一个 Rust 项目的所有者，并且正在寻找贡献者，请在这里提交任务。
Rust Core 更新 上周合并221 个请求
 稳定async_await - Rust 1.</description>
    </item>
    
    <item>
      <title>小的Rust结构类型,应使用复制还是借用传递?(译)</title>
      <link>/2019/09/02/%E5%B0%8F%E7%9A%84rust%E7%BB%93%E6%9E%84%E7%B1%BB%E5%9E%8B%E5%BA%94%E4%BD%BF%E7%94%A8%E5%A4%8D%E5%88%B6%E8%BF%98%E6%98%AF%E5%80%9F%E7%94%A8%E4%BC%A0%E9%80%92%E8%AF%91/</link>
      <pubDate>Mon, 02 Sep 2019 10:11:45 +0800</pubDate>
      
      <guid>/2019/09/02/%E5%B0%8F%E7%9A%84rust%E7%BB%93%E6%9E%84%E7%B1%BB%E5%9E%8B%E5%BA%94%E4%BD%BF%E7%94%A8%E5%A4%8D%E5%88%B6%E8%BF%98%E6%98%AF%E5%80%9F%E7%94%A8%E4%BC%A0%E9%80%92%E8%AF%91/</guid>
      <description>对于小的 Rust 结构类型，应使用复制（copy）还是借用(borrow)传递？ 2019 年 8 月 26 日 ❤️ 原文
像许多好故事一样，这个故事从一个简单的问题开始。对于小的 Rust 结构类型，应使用复制还是借用传递？例如：
struct Vector3 { x: f32, y: f32, z: f32 } fn dot_product_by_copy(a: Vector3, b: Vector3) -&amp;gt; float { a.x*b.x + a.y*b.y + a.z*b.z } fn dot_product_by_borrow(a: &amp;amp;Vector3, b: &amp;amp;Vector3) -&amp;gt; float { a.x*b.x + a.y*b.y + a.z*b.z }  就是这个简单的问题将我带向了长征之路，带有些惊人的曲折和发现。
为什么这个问题是重要的呢 这个问题的答案有两个原因：性能和人体工程学。
性能 通过复制传递就是说，我们要每个Vector3复制 12 个字节(3 个 f32 类型)。 若是通过 borrow 传递，那么每个Vector3就是一个 8 字节的指针（在 64 位上）。其实两者很接近，也许对性能来说无关紧要。</description>
    </item>
    
    <item>
      <title>如何用VSCode调试Rust(译)</title>
      <link>/2019/08/30/%E5%A6%82%E4%BD%95%E7%94%A8vscode%E8%B0%83%E8%AF%95rust%E8%AF%91/</link>
      <pubDate>Fri, 30 Aug 2019 11:13:52 +0800</pubDate>
      
      <guid>/2019/08/30/%E5%A6%82%E4%BD%95%E7%94%A8vscode%E8%B0%83%E8%AF%95rust%E8%AF%91/</guid>
      <description>如何用 Visual Studio Code 调试 Rust 🌟 2019-03-24 ❤️ 原文
我是 Visual Studio Code 编辑器的铁杆。不幸的是，它的 Rust 调试不 太能 开箱即用。
配置调试器并不困难。但有几个步骤。我已经看了好几遍了。我写这本指南是为了省下未来回想的脑力。
希望本指南对其他一些人也有用。
安装 Rust 和 VS Code 这应该不用多说了。
安装 Rust
安装 Visual Studio Code
安装 VS Code 扩展 您需要安装一个扩展。哪一个取决于你的平台。
C/C++（Windows）
codelldb（OS X/Linux）
还要继续安装Rust 扩展。
配置 VS Code 现在已经安装了工具，您需要配置 VS Code 启动属性。
单击“调试(Debug)”-&amp;gt;“添加配置(Add Configuration)”
如果您在 Windows 上，请选择C++ (Windows)
如果您使用的是 Mac 或 Linux，请选择LLDB: Custom Launch
这应该会创建并打开launch.json。您必须手动更改“program”下的可执行文件名。
接下来，您应该验证是否启用了断点。有些读者说需要这样做。一些机器是默认启用它。🤷‍♂️
文件-&amp;gt;首选项-&amp;gt;设置（File -&amp;gt; Preferences -&amp;gt; Settings）</description>
    </item>
    
    <item>
      <title>Rust ? 语法糖 (译)</title>
      <link>/2019/02/27/rust-%E8%AF%AD%E6%B3%95%E7%B3%96-%E8%AF%91/</link>
      <pubDate>Wed, 27 Feb 2019 14:56:41 +0800</pubDate>
      
      <guid>/2019/02/27/rust-%E8%AF%AD%E6%B3%95%E7%B3%96-%E8%AF%91/</guid>
      <description>宏 std::try macro_rules! try { ( $ expr : expr ) =&amp;gt; { ... }; ( $ expr : expr , ) =&amp;gt; { ... }; }  用于减少样板代码，以匹配Result以及转换下游错误的帮助宏。
增加?运算符，以替换try!。简化。
try!与给定Result匹配。对 Ok 变量，表达式为包装的值。
如果是 Err 变量，则检索内部错误。try!！然后使用 From 执行转换。这提供了专用错误和更通用错误之间的自动转换。然后立即返回错误。
因为提前返回，try!只能在返回Result的函数中使用。
Examples use std::io; use std::fs::File; use std::io::prelude::*; enum MyError { FileWriteError } impl From&amp;lt;io::Error&amp;gt; for MyError { fn from(e: io::Error) -&amp;gt; MyError { MyError::FileWriteError } } // 快速返回错误的首选方法 fn write_to_file_question() -&amp;gt; Result&amp;lt;(), MyError&amp;gt; { let mut file = File::create(&amp;#34;my_best_friends.</description>
    </item>
    
    <item>
      <title>Rust E0008 - ref 的重要性（译）</title>
      <link>/2019/02/25/rust-e0008-ref-%E7%9A%84%E9%87%8D%E8%A6%81%E6%80%A7%E8%AF%91/</link>
      <pubDate>Mon, 25 Feb 2019 14:17:47 +0800</pubDate>
      
      <guid>/2019/02/25/rust-e0008-ref-%E7%9A%84%E9%87%8D%E8%A6%81%E6%80%A7%E8%AF%91/</guid>
      <description>官方原文  E0008，(无法逾越的 ref 关键字) 匹配条件语句中的绑定名称，在模式控制中保留了其类型。因此，若在一个模式中，这一名称是通过移动进行绑定的，那它也会被移动到在模式代码中的参考变量位置。这样做的话，会阻止原名称在匹配语句的主体中可用。
考虑以下:
match Some(&amp;#34;hi&amp;#34;.to_string()) { Some(s) if s.len() == 0 =&amp;gt; {}, // 使用 s.  _ =&amp;gt; {}, }  变量 s 具有 String 类型，并且它在 匹配语句 中的用法是 String 类型的变量。 使用s变量的代码，在匹配语句主体的分离作用域内，执行有效，因此该值被移动到此匿名作用域内，结果就是在匹配语句的主体中变得不可用。
上面的问题，可以通过使用 ref 关键字来解决。
match Some(&amp;#34;hi&amp;#34;.to_string()) { Some(ref s) if s.len() == 0 =&amp;gt; {}, _ =&amp;gt; {}, }  虽然，这个例子似乎不怎么厉害且易于解决，但当它遇到消耗该值的函数时,问题就变得清晰了:
struct A{} impl A { fn consume(self) -&amp;gt; usize { 0 } } fn main() { let a = Some(A{}); match a { Some(y) if y.</description>
    </item>
    
    <item>
      <title>&gt;&gt;&gt; Rust 官方学习索引(译&#43;Copy)</title>
      <link>/2018/12/28/rust-%E5%AE%98%E6%96%B9%E5%AD%A6%E4%B9%A0%E7%B4%A2%E5%BC%95%E8%AF%91-copy/</link>
      <pubDate>Fri, 28 Dec 2018 20:13:43 +0800</pubDate>
      
      <guid>/2018/12/28/rust-%E5%AE%98%E6%96%B9%E5%AD%A6%E4%B9%A0%E7%B4%A2%E5%BC%95%E8%AF%91-copy/</guid>
      <description>.blog-post  h2:first-child {display:none}   ❤️ 学习 Rust    开启您的 Rust 之旅   《Rust 程序设计语言》被亲切地称为“圣经”。本书从基本原则出发，给出了 Rust 语言的概览。您将在阅读本书的过程中构建几个项目，读完本书后，您就能扎实地掌握 Rust 语言。
阅读本书！（中文）   此外，Rustlings 课程会指导您下载并设置 Rust 工具链，在命令行中教您阅读和编写 Rust 代码的语法基础。它可以运行在您自己的环境中，是《通过例子学 Rust》之外的另一种选择。
学习 Rustlings 课程！   如果您不喜欢阅读大量的文档来学习语言，那么《通过例子学 Rust》就能涵盖您要学的知识。虽然本书花了很多篇幅来解释代码，但它展示的代码很丰富，并且尽量减少了文字解释。它还包括很多练习！
阅读《通过例子学 Rust》！（中文）       与 Rust 共同成长    阅读核心文档 以下所有文档都可以用 rustup doc 命令在本地阅读，它会在您的浏览器中离线打开这些资源！
标准库 详尽的 Rust 标准库 API 手册。  版本指南 Rust 版本指南。  Cargo 之书（中文） Rust 的包管理器和构建系统。  rustdoc 之书(中文) 学习如何为您的 crate 编写完美的文档。  rustc 之书(中文) 熟悉 Rust 编译器中可用的选项。  编译错误索引表 深入解释了您可能会遇到的编译错误。     在应用领域中点亮您的技能树 命令行之书 (中文)  学习如何用 Rust 构建高效的命令行应用。  WebAssembly 之书(中文)  通过 WebAssembly 用 Rust 构建浏览器原生的库。  嵌入式之书  熟练掌握用 Rust 编写微控制器和其它嵌入式系统程序。</description>
    </item>
    
  </channel>
</rss>