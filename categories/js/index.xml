<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Js on Code &gt; Explain &gt; Transalte 的人</title>
    <link>/categories/js/</link>
    <description>Recent content in Js on Code &gt; Explain &gt; Transalte 的人</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Wed, 20 Feb 2019 12:55:13 +0800</lastBuildDate>
    
	<atom:link href="/categories/js/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Doc Templite 模版工具</title>
      <link>/2019/02/20/doc-templite-%E6%A8%A1%E7%89%88%E5%B7%A5%E5%85%B7/</link>
      <pubDate>Wed, 20 Feb 2019 12:55:13 +0800</pubDate>
      
      <guid>/2019/02/20/doc-templite-%E6%A8%A1%E7%89%88%E5%B7%A5%E5%85%B7/</guid>
      <description>回顾初始化脚本 第八步：
 8. 对 项目目录 执行 [doc-templite] - js 模版工具  doc-templite 为了解决，能一次性替换，文件中相应部分的内容，doc-templite 诞生了。 吸取了doctoc,templite,toml&amp;hellip;相关工具/库的精华，综合而成。
readme doc-templite   为 多个 md 文件 准备的模版工具
 当我们使用 多个文件或者多项目的readme.md时,样式可以帮助我们说出或显示某些东西,比如 md 表格,但下次我想要一个 md 网络链接. 太麻烦了! 去修改更改这些文件,所以doc-templite也许有帮助.
 安装 npm i -g doc-templite 示例 1. 修改readme.md👇 必须有 doc-templite 标签 &amp;lt;!-- doc-templite START --&amp;gt; &amp;lt;!-- doc-templite-id = &amp;#39;readme&amp;#39; --&amp;gt; &amp;lt;!-- name = &amp;#39;yobrave&amp;#39; age = 18 --&amp;gt; &amp;lt;!-- doc-templite END --&amp;gt;  注意:在 START-END 块中,我们使用的是 toml 和 &amp;lt;!</description>
    </item>
    
    <item>
      <title>Vue Getnoabsbooks 看书已不再迅速</title>
      <link>/2019/02/17/vue-getnoabsbooks-%E7%9C%8B%E4%B9%A6%E5%B7%B2%E4%B8%8D%E5%86%8D%E8%BF%85%E9%80%9F/</link>
      <pubDate>Sun, 17 Feb 2019 14:38:18 +0800</pubDate>
      
      <guid>/2019/02/17/vue-getnoabsbooks-%E7%9C%8B%E4%B9%A6%E5%B7%B2%E4%B8%8D%E5%86%8D%E8%BF%85%E9%80%9F/</guid>
      <description>不知道有多少试过vue-getnoabsbooks 项目的仁 先抱歉一声，关于它的交流障碍问题
 演示页面  这个应用是因为我厌倦了广告弹窗(各种黄赌毒，作为新时代的三好青年&amp;hellip;这就是就是我)
我搞了这些东东
总思路 一： 通过，heroku 的免费平台，上传了getnoabsbooks 的 js 后台
二： 再拿jsonstore 服务(当然也是免费)，作为简易数据存储，主要是书签与书籍存储，作为应用首页面
三： 还有，就是简单的 Vue 应用，主要为请求(GET+POST)后台与看书相关的功能(自动阅读，字体大小，自动缓存等等)。
通过后台对那些(daoban)网站，获取，冲洗，以及链接格式修正(改为 Vue 路由格式)，返回给 Vue 应用。
并没有大刀阔斧地搞成一个，存好书字本身的网站，也没有所谓的用户(难度在于，有入门门槛，主要是部署这一系列东东)。
但，就使用来说，自认为不错。
 甚至你可以直接，在http://llever.com/getNoAbsBooks/#/后面，加上书页面的网站链接，当然只能处理那么一两种格式网页。
如：http://llever.com/getNoAbsBooks/#/https://m.zwdu.com/book/30586/11314042_2.html，就是一个示例，这种做法并不会存入书籍目录。
 不过，世界上没有免费的午餐，即便是有，也不是永远的。刚开始，jsonstore + daoban 网站 + heroku + vue 应用的交流速度还过得去，而现在出于某些不可抗力因素，之间交流越来越难受(主要是与 heroku 交流的障碍，谢谢祖国，还有自身，在一定时间内，若无活跃连接，会自动沉默，这就是导致第一次请求永远超时的原因)，常常出现请求超时的情况。
我想，去广告功能方面，后台的冲洗是必不可少的，而又想在免费的道路上一直走下去，就目前而言，并未找到好的办法。
我现在看书去广告的选择 我现在选用了手机浏览器自带的功能（Brave 浏览器，Iphone 版)，所谓去广告，其实只是 Brave 功能的一个缩影。 起作用的按钮是禁用脚本，由此可以看出，Brave 其实是个安全浏览器，它还有其他杂七杂八的(好/坏)东西(比如重启后，网页不见的诡秘)，虽然在界面，或是生态上，达不到其他大浏览器那般，但在看书去广告方面，绝对实用。</description>
    </item>
    
  </channel>
</rss>