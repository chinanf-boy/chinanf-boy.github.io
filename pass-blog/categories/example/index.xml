<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Example on 杂项博文</title>
    <link>/pass-blog/categories/example/</link>
    <description>Recent content in Example on 杂项博文</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Tue, 19 Mar 2019 10:26:53 +0800</lastBuildDate>
    
	<atom:link href="/pass-blog/categories/example/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>RealWorld.io 真实世界的全栈应用</title>
      <link>/pass-blog/2019/03/19/realworld.io-%E7%9C%9F%E5%AE%9E%E4%B8%96%E7%95%8C%E7%9A%84%E5%85%A8%E6%A0%88%E5%BA%94%E7%94%A8/</link>
      <pubDate>Tue, 19 Mar 2019 10:26:53 +0800</pubDate>
      
      <guid>/pass-blog/2019/03/19/realworld.io-%E7%9C%9F%E5%AE%9E%E4%B8%96%E7%95%8C%E7%9A%84%E5%85%A8%E6%A0%88%E5%BA%94%E7%94%A8/</guid>
      <description>img{ max-width: 33%; float:left; } img+img{ margin-left: 1rem; width:20%; } .blog-post p img { border: 2px dashed #f69c55; }  RealWorld.io 项目 虽然大多数“todo”演示提供了对框架功能不错的粗略一瞥，但它们通常不会传达，实际构建 真实 应用程序，所需的知识和视角。
而 RealWorld 通过允许您选择任何前端（React，Angular 2 和更多）以及任何后端（Node，Django 等）来解决这个问题，并了解它们如何为现实世界提供动力，设计精美的 fullstack 应用程序称为“Conduit” —— Medium.com 完全相同 的克隆。
   具体项目 Github     https://github.com/gothinkster/realworld    小样  仅列举我，较为知道的框架，更多组合请查看源项目
  前端  React (1) with Redux (2) with MobX Vue Hyperapp  后端  Node (1) Express (2) NestJS (3) Koa GO (1) Gin (2) Echo (3) 干净的 Python (1) Django (2) Flask Rust (2) Rocket   前端 React with Redux React / Redux</description>
    </item>
    
    <item>
      <title>Go 多并发 只要最快的一个正确返回 示例</title>
      <link>/pass-blog/2018/11/07/go-%E5%A4%9A%E5%B9%B6%E5%8F%91-%E5%8F%AA%E8%A6%81%E6%9C%80%E5%BF%AB%E7%9A%84%E4%B8%80%E4%B8%AA%E6%AD%A3%E7%A1%AE%E8%BF%94%E5%9B%9E-%E7%A4%BA%E4%BE%8B/</link>
      <pubDate>Wed, 07 Nov 2018 11:06:59 +0800</pubDate>
      
      <guid>/pass-blog/2018/11/07/go-%E5%A4%9A%E5%B9%B6%E5%8F%91-%E5%8F%AA%E8%A6%81%E6%9C%80%E5%BF%AB%E7%9A%84%E4%B8%80%E4%B8%AA%E6%AD%A3%E7%A1%AE%E8%BF%94%E5%9B%9E-%E7%A4%BA%E4%BE%8B/</guid>
      <description>我们用Go 多个并发等待 Url请求 示例，改造
code package main import ( &amp;#34;fmt&amp;#34; &amp;#34;io/ioutil&amp;#34; &amp;#34;net/http&amp;#34; ) func main() { urls := []string{ &amp;#34;http://llever.com&amp;#34;, &amp;#34;http://llever.com/goreleaser-zh&amp;#34;, &amp;#34;http://llever.com/about/&amp;#34;, } jsonResponses := make(chan int) all := 0 for _, url := range urls { all++ // 这个 ++，可以改成 原子添加，但也没那么必要 	go getURL(url, jsonResponses) } index := 0 for response := range jsonResponses { // 等待 getURL 中 jsonResponses通道，返回 	index++ // 这个 ++，则大可不必 	if response !</description>
    </item>
    
    <item>
      <title>Go 多个并发等待 Url请求 示例</title>
      <link>/pass-blog/2018/11/04/go-%E5%A4%9A%E4%B8%AA%E5%B9%B6%E5%8F%91%E7%AD%89%E5%BE%85-url%E8%AF%B7%E6%B1%82-%E7%A4%BA%E4%BE%8B/</link>
      <pubDate>Sun, 04 Nov 2018 12:34:22 +0800</pubDate>
      
      <guid>/pass-blog/2018/11/04/go-%E5%A4%9A%E4%B8%AA%E5%B9%B6%E5%8F%91%E7%AD%89%E5%BE%85-url%E8%AF%B7%E6%B1%82-%E7%A4%BA%E4%BE%8B/</guid>
      <description>Code package main import ( &amp;#34;fmt&amp;#34; &amp;#34;io/ioutil&amp;#34; &amp;#34;log&amp;#34; &amp;#34;net/http&amp;#34; &amp;#34;sync&amp;#34; ) func main() { urls := []string{ &amp;#34;http://llever.com&amp;#34;, &amp;#34;http://llever.com/goreleaser-zh&amp;#34;, &amp;#34;http://llever.com/about/&amp;#34;, } jsonResponses := make(chan int) var wg sync.WaitGroup all := 0 for _, url := range urls { wg.Add(1) all++ go getURL(url, &amp;amp;wg, jsonResponses) } index := 0 for response := range jsonResponses { index++ fmt.Println(response) if all == index { close(jsonResponses) } } fmt.Println(&amp;#34;before done&amp;#34;) wg.Wait() } func getURL(url string, wg *sync.</description>
    </item>
    
    <item>
      <title>Golang Chroma 使用例子</title>
      <link>/pass-blog/2018/11/01/golang-chroma-%E4%BD%BF%E7%94%A8%E4%BE%8B%E5%AD%90/</link>
      <pubDate>Thu, 01 Nov 2018 10:30:33 +0800</pubDate>
      
      <guid>/pass-blog/2018/11/01/golang-chroma-%E4%BD%BF%E7%94%A8%E4%BE%8B%E5%AD%90/</guid>
      <description>Chroma 通用语法高亮库    源码 翻译     github repo 中文    简略说一下，三点  要是屁话，不想听，直接上例子，或看中文翻译
  1: lexers 词法分析器  主要是为了，知道你用的那串字符，是什么语言  2: styles 主题/样式  
 查看-&amp;gt;主题名称 
[ abap, algol, algol_nu, arduino, autumn, borland, bw, colorful, dracula, emacs, friendly, fruity, github, igor, lovelace, manni, monokai, monokailight, murphy, native, paraiso-dark, paraiso-light, pastie, perldoc, pygments, rainbow_dash, rrt, solarized-dark, solarized-dark256, solarized-light, swapoff, tango, trac, vim, vsxcode ]</description>
    </item>
    
  </channel>
</rss>