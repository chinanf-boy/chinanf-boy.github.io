# The Toolchain
[回去](toc/default.html)

---

https://www.rust-lang.org/en-US/install.html

---

## Rustup

Rustup is the standard tool for managing Rusts compiler toolchain.

http://rustup.rs/

---

## Important Commands

<pre><code data-source="chapters/shared/code/installation/1.sh" data-trim="hljs sh"></code></pre>

---

# First Steps

Execute the following commands:

<pre><code data-source="chapters/shared/code/installation/2.sh" data-trim="hljs sh"></code></pre>
This loads the sources of the default library and documentation for completion and offline use.

---

## Content of the Toolchain

-   rustc
-   cargo
-   rustdoc
-   rust-(lldb|gdb)
-   libcore/libstd

The debugger installed is platform dependent.

---

## rustc

<pre><code data-source="chapters/shared/code/installation/3.sh" data-trim="hljs sh"></code></pre>
The Rust compiler builds and links Rust code.

`rustc` is almost completely written in Rust.

---

## Functional Test

<pre><code data-source="chapters/shared/code/installation/4.rs" data-trim="hljs rust"></code></pre>

---

<pre><code data-source="chapters/shared/code/installation/5.sh" data-trim="hljs sh"></code></pre>

---

## Cargo

<pre><code data-source="chapters/shared/code/installation/6.sh" data-trim="hljs sh"></code></pre>

---

Cargo is Rusts build and package management tool.

Cargo is installed along with `rustc`, but is not tightly bound to a `rustc` version.

---

## Once more with Cargo

<pre><code data-source="chapters/shared/code/installation/7.sh" data-trim="hljs sh"></code></pre>

---

## A Little Look Around

-   What is in Cargo.toml?
-   What is in Cargo.lock?

For details, check the [Cargo Manifest docs](http://doc.crates.io/manifest.html).

---

## Cargo Also Manages Tools

<pre><code data-source="chapters/shared/code/installation/8.sh" data-trim="hljs sh"></code></pre>

