# cargo
[回去](toc/default.html)

---

Cargo is the standard build toolchain for Rust.

Every release of `rustc` is shipped with a specific version of cargo.

In general, cargo is independent of the used `rustc` version.

---

## Projects

A cargo project contains (at minimum):

-   A Manifest (Cargo.toml)
-   A source file (library or application) in the `src` folder (default)

---

In addition, a cargo project can contain:

-   tests (default directory `tests`)
-   benchmarks (default directory `benches`)
-   a build script (default `build.rs`)
-   examples (default directory `examples`)

---

## The Manifest

The [Cargo-Manifest](http://doc.crates.io/manifest.html) is written using [TOML](http://doc.crates.io/manifest.html). It at least contains the name of the project.

<pre><code data-source="chapters/shared/code/cargo/1.toml" data-trim="hljs toml"></code></pre>

---

## `cargo build`

`cargo build` builds the whole project and puts the result in the directory `target`.

By default, cargo uses the Debug profile, which means that the resulting binary with be unoptimized and with debug symbols!

`cargo build --release` uses the optimizing profile.

---


*Always use* `--release` for benchmarks, especially iterators get a huge speed boost from optimizations.

---

## `cargo run`

If the project contains an application, you can run it using `cargo run -- [Arguments]`.

If it contains multiple, the name of the intended binary can be given using `--bin <name>`.

The debug profile is default here.

---

## `cargo test`

`cargo test` runs all tests. You can provide a test name or module name to filter the test being run.

Test use the debug profile per default.

`cargo test` runs all test, including documentation test and compilation of examples!

---

## `cargo bench`

`cargo bench` runs all benchmarks.

Benchmarks default to the release profile.

---

## Versioning

In the Rust community [Semantic Versioning](https://semver.org) is the recommended versioning standard.

-   The major version must be raised if there are breaking interface changes.
-   The minor version must be raised if new features are added
-   The patch version marks bug fixes and performance improvements.

---

## Pre-release

If the version of a library is below `1`, it is considered "pre-release", which means breaking interface changes can happen with *every minor version*.

---

## Version expressions

Cargo allow expressing version ranges in different fashions.


-   `=1.2.3`: Exact version, cargo will only use that one
-   `0.1`: Any patch version of the "0.1" series
-   `< 0.8`: Any minor version smaller then "0.8"

For more details, check the [docs](http://doc.crates.io/manifest.html)

---

## Version resolution

At the first build (or through `cargo update`), cargo calculates a version tree fulfilling the constraints stated in Cargo.toml. If successful, it will be saved in a Lockfile (Cargo.lock).

It is recommendable to always keep the Lockfile under version control! (for repeatable builds)

---

## Dependencies in detail

Cargo knows 3 different kinds of dependencies:

-   normal dependencies
-   build dependencies
-   test dependencies

---

## Example

<pre><code data-source="chapters/shared/code/cargo/2.toml" data-trim="hljs toml"></code></pre>

---

## Dependencies in detail

<pre><code data-source="chapters/shared/code/cargo/3.toml" data-trim="hljs toml"></code></pre>
<pre><code data-source="chapters/shared/code/cargo/4.toml" data-trim="hljs toml"></code></pre>

---

## Aside

Dependencies outside of crates.io are forbidden if a library is to be published on crates.io.

---

## Local paths

It is possible to temporarily replace libraries though local ones. For this, their path need to be registered in `$PROJECT_PATH/.cargo/config`.

<pre><code data-source="chapters/shared/code/cargo/5.toml" data-trim="hljs toml"></code></pre>

Libraries found here will be preferred. This allows easy testing of patches.

---

## Profiles

The cargo profiles (release, bench, test...) can be customized. Details can be found in the [Manifest-documentation](http://doc.crates.io/manifest.html)

---

## Targets

-   profiles and dependencies can be configured based on the compilation target
-   `cargo build --target ...` uses that target
-   the target must be installed beforehand
-   consider using xargo

---

## Workspaces

Cargo can group multiple projects in a workspace. They then share settings and the same `target` directory.

See the [manifest documentation](http://doc.crates.io/manifest.html) for details.

---

## Features

`rustc` provides the ability to ignore certain code parts on compilation. This happens through feature flags.

<pre><code data-source="chapters/shared/code/cargo/6.rs" data-trim="hljs rust"></code></pre>

---

These can be registered in `Cargo.toml`.

<pre><code data-source="chapters/shared/code/cargo/7.toml" data-trim="hljs toml"></code></pre>

---

And then be expressed on a dependency:

<pre><code data-source="chapters/shared/code/cargo/8.toml" data-trim="hljs toml"></code></pre>

---

## Directly invoking `rustc`

`cargo rustc` invokes `rustc` directly and allows passing of additional parameters.
