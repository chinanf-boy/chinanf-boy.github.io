# Conversions
[回去](toc/default.html)

---

Rust provides many ways to express conversion of one type to another.

This improves safety and communicates intent.

---

## `From<T>`, `Into<T>`

Conversion of one Type into another.

If `X` is `From<T>`, then `T` is `Into<X>` automatically.

The usage depends on the context.

---

## Example

<pre><code data-source="chapters/shared/code/conversion-patterns/1.rs" data-trim="hljs rust" class="lang-rust"></code></pre>

---

## What does `try!` or `?` do in detail?

<pre><code data-source="chapters/shared/code/conversion-patterns/2.rs" data-trim="hljs rust"></code></pre>

---

## `AsRef<T>`

Reference-to-reference-conversion. Indicates that a type can easily produce references to another type.

---

## Example

<pre><code data-source="chapters/shared/code/conversion-patterns/3.rs" data-trim="hljs rust" class="lang-rust"></code></pre>

---

## `Borrow<T>` and `BorrowMut<T>`

`Borrow<T>` abstracts over ownership and borrowing. `Borrow<T>` expresses that the type can produce a borrow of `T`. It is similar to `AsRef<T>`, but communicates a different intent.

